
IMU_cal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003fd0  08003fd0  00004fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004034  08004034  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004034  08004034  00005034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800403c  0800403c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800403c  0800403c  0000503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004040  08004040  00005040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004044  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  080040a0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080040a0  00006264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c716  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf6  00000000  00000000  000127a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00014498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077b  00000000  00000000  00014e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018507  00000000  00000000  000155ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3c2  00000000  00000000  0002dab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1a6  00000000  00000000  0003ae74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c501a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c94  00000000  00000000  000c5060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c7cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003fb8 	.word	0x08003fb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003fb8 	.word	0x08003fb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN7MPU9250C1EP17I2C_HandleTypeDef>:
 */

#include "MPU9250.h"

// Constructor
MPU9250::MPU9250(I2C_HandleTypeDef *handle) : i2cHandle(handle) {}
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	22d0      	movs	r2, #208	@ 0xd0
 8000584:	711a      	strb	r2, [r3, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	223b      	movs	r2, #59	@ 0x3b
 800058a:	715a      	strb	r2, [r3, #5]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	223d      	movs	r2, #61	@ 0x3d
 8000590:	719a      	strb	r2, [r3, #6]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	223f      	movs	r2, #63	@ 0x3f
 8000596:	71da      	strb	r2, [r3, #7]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2243      	movs	r2, #67	@ 0x43
 800059c:	721a      	strb	r2, [r3, #8]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2245      	movs	r2, #69	@ 0x45
 80005a2:	725a      	strb	r2, [r3, #9]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2247      	movs	r2, #71	@ 0x47
 80005a8:	729a      	strb	r2, [r3, #10]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	226b      	movs	r2, #107	@ 0x6b
 80005ae:	72da      	strb	r2, [r3, #11]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	221a      	movs	r2, #26
 80005b4:	731a      	strb	r2, [r3, #12]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2219      	movs	r2, #25
 80005ba:	735a      	strb	r2, [r3, #13]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	221b      	movs	r2, #27
 80005c0:	739a      	strb	r2, [r3, #14]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	221c      	movs	r2, #28
 80005c6:	73da      	strb	r2, [r3, #15]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	221d      	movs	r2, #29
 80005cc:	741a      	strb	r2, [r3, #16]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2237      	movs	r2, #55	@ 0x37
 80005d2:	745a      	strb	r2, [r3, #17]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <_ZN7MPU925013writeRegisterEhh>:

// Write a value to an MPU9250 register
void MPU9250::writeRegister(uint8_t reg, uint8_t value) {
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af04      	add	r7, sp, #16
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	460b      	mov	r3, r1
 80005ec:	70fb      	strb	r3, [r7, #3]
 80005ee:	4613      	mov	r3, r2
 80005f0:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(i2cHandle, MPU9250_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6818      	ldr	r0, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	4619      	mov	r1, r3
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	9302      	str	r3, [sp, #8]
 8000606:	2301      	movs	r3, #1
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	1cbb      	adds	r3, r7, #2
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	f001 f89a 	bl	8001748 <HAL_I2C_Mem_Write>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN7MPU925016readRegisterPairEh>:

// Read two bytes from a register and combine them
int16_t MPU9250::readRegisterPair(uint8_t regHigh) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
    uint8_t data[2];
    HAL_I2C_Mem_Read(i2cHandle, MPU9250_ADDR, regHigh, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	4619      	mov	r1, r3
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	b29a      	uxth	r2, r3
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	9302      	str	r3, [sp, #8]
 800063c:	2302      	movs	r3, #2
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	f001 f978 	bl	800193c <HAL_I2C_Mem_Read>
    return (int16_t)((data[0] << 8) | data[1]);
 800064c:	7b3b      	ldrb	r3, [r7, #12]
 800064e:	021b      	lsls	r3, r3, #8
 8000650:	b21a      	sxth	r2, r3
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	b21b      	sxth	r3, r3
 8000656:	4313      	orrs	r3, r2
 8000658:	b21b      	sxth	r3, r3
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <_ZN7MPU925010initializeEv>:

// Initialize the MPU9250 (e.g., wake up the sensor)
void MPU9250::initialize() {
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	// Reset the device
	    writeRegister(PWR_MGMT_1, 0x80);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7adb      	ldrb	r3, [r3, #11]
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	4619      	mov	r1, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ffb5 	bl	80005e2 <_ZN7MPU925013writeRegisterEhh>
	    HAL_Delay(100);
 8000678:	2064      	movs	r0, #100	@ 0x64
 800067a:	f000 fc79 	bl	8000f70 <HAL_Delay>

	    // Wake up the device and set clock source
	    writeRegister(PWR_MGMT_1, 0x01);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7adb      	ldrb	r3, [r3, #11]
 8000682:	2201      	movs	r2, #1
 8000684:	4619      	mov	r1, r3
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ffab 	bl	80005e2 <_ZN7MPU925013writeRegisterEhh>


}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <_ZN7MPU925022read_raw_accelerometerERhS0_S0_S0_S0_S0_>:
    ax = readRegisterPair(ACCEL_XOUT_H);
    ay = readRegisterPair(ACCEL_XOUT_H + 2);
    az = readRegisterPair(ACCEL_XOUT_H + 4);
}

void MPU9250::read_raw_accelerometer(uint8_t &ax_H, uint8_t &ax_L, uint8_t &ay_H, uint8_t &ay_L, uint8_t &az_H, uint8_t &az_L) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af04      	add	r7, sp, #16
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	603b      	str	r3, [r7, #0]
    // Buffer to store all 6 bytes of accelerometer data
    uint8_t data[6];

    // Read all accelerometer registers in one I2C transaction
    if (HAL_I2C_Mem_Read(i2cHandle, MPU9250_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY) == HAL_OK) {
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	461a      	mov	r2, r3
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	2306      	movs	r3, #6
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2301      	movs	r3, #1
 80006c4:	f001 f93a 	bl	800193c <HAL_I2C_Mem_Read>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	bf0c      	ite	eq
 80006ce:	2301      	moveq	r3, #1
 80006d0:	2300      	movne	r3, #0
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d012      	beq.n	80006fe <_ZN7MPU925022read_raw_accelerometerERhS0_S0_S0_S0_S0_+0x6a>
        // Assign high and low bytes for each axis
        ax_H = data[0];
 80006d8:	7c3a      	ldrb	r2, [r7, #16]
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	701a      	strb	r2, [r3, #0]
        ax_L = data[1];
 80006de:	7c7a      	ldrb	r2, [r7, #17]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	701a      	strb	r2, [r3, #0]
        ay_H = data[2];
 80006e4:	7cba      	ldrb	r2, [r7, #18]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	701a      	strb	r2, [r3, #0]
        ay_L = data[3];
 80006ea:	7cfa      	ldrb	r2, [r7, #19]
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	701a      	strb	r2, [r3, #0]
        az_H = data[4];
 80006f0:	7d3a      	ldrb	r2, [r7, #20]
 80006f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f4:	701a      	strb	r2, [r3, #0]
        az_L = data[5];
 80006f6:	7d7a      	ldrb	r2, [r7, #21]
 80006f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006fa:	701a      	strb	r2, [r3, #0]
        // Handle I2C read error (e.g., set values to zero or indicate an error state)
        ax_H = ax_L = ay_H = ay_L = az_H = az_L = 0;
        // Optionally log an error or handle it in another way
        // printf("I2C Error: Failed to read accelerometer data.\n");
    }
}
 80006fc:	e016      	b.n	800072c <_ZN7MPU925022read_raw_accelerometerERhS0_S0_S0_S0_S0_+0x98>
        ax_H = ax_L = ay_H = ay_L = az_H = az_L = 0;
 80006fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000706:	781a      	ldrb	r2, [r3, #0]
 8000708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	6a3b      	ldr	r3, [r7, #32]
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	781a      	ldrb	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	701a      	strb	r2, [r3, #0]
}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZN7MPU925013readGyroscopeERsS0_S0_>:

// Read gyroscope data
void MPU9250::readGyroscope(int16_t &gx, int16_t &gy, int16_t &gz) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	603b      	str	r3, [r7, #0]
    gx = readRegisterPair(GYRO_XOUT_H);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	7a1b      	ldrb	r3, [r3, #8]
 8000746:	4619      	mov	r1, r3
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f7ff ff67 	bl	800061c <_ZN7MPU925016readRegisterPairEh>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	801a      	strh	r2, [r3, #0]
    gy = readRegisterPair(GYRO_YOUT_H);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	7a5b      	ldrb	r3, [r3, #9]
 800075a:	4619      	mov	r1, r3
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f7ff ff5d 	bl	800061c <_ZN7MPU925016readRegisterPairEh>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	801a      	strh	r2, [r3, #0]
    gz = readRegisterPair(GYRO_ZOUT_H);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	7a9b      	ldrb	r3, [r3, #10]
 800076e:	4619      	mov	r1, r3
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f7ff ff53 	bl	800061c <_ZN7MPU925016readRegisterPairEh>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	801a      	strh	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_ZN7MPU925018read_raw_gyroscopeERhS0_S0_S0_S0_S0_>:

void MPU9250::read_raw_gyroscope(uint8_t &gx_H, uint8_t &gx_L, uint8_t &gy_H, uint8_t &gy_L, uint8_t &gz_H, uint8_t &gz_L){
 8000786:	b580      	push	{r7, lr}
 8000788:	b08a      	sub	sp, #40	@ 0x28
 800078a:	af04      	add	r7, sp, #16
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	603b      	str	r3, [r7, #0]
	// Data buffer for high and low bits.
	uint8_t data[2];

	// Read accelerometer.
	HAL_I2C_Mem_Read(i2cHandle, MPU9250_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	4619      	mov	r1, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	7a1b      	ldrb	r3, [r3, #8]
 80007a2:	461a      	mov	r2, r3
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
 80007a8:	9302      	str	r3, [sp, #8]
 80007aa:	2302      	movs	r3, #2
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2301      	movs	r3, #1
 80007b6:	f001 f8c1 	bl	800193c <HAL_I2C_Mem_Read>
	gx_H = data[0];
 80007ba:	7d3a      	ldrb	r2, [r7, #20]
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	701a      	strb	r2, [r3, #0]
	gx_L = data[1];
 80007c0:	7d7a      	ldrb	r2, [r7, #21]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(i2cHandle, MPU9250_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	4619      	mov	r1, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	7a1b      	ldrb	r3, [r3, #8]
 80007d4:	461a      	mov	r2, r3
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	9302      	str	r3, [sp, #8]
 80007dc:	2302      	movs	r3, #2
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	f001 f8a8 	bl	800193c <HAL_I2C_Mem_Read>
	gy_H = data[0];
 80007ec:	7d3a      	ldrb	r2, [r7, #20]
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	701a      	strb	r2, [r3, #0]
	gy_L = data[1];
 80007f2:	7d7a      	ldrb	r2, [r7, #21]
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(i2cHandle, MPU9250_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	4619      	mov	r1, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	7a1b      	ldrb	r3, [r3, #8]
 8000806:	461a      	mov	r2, r3
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	9302      	str	r3, [sp, #8]
 800080e:	2302      	movs	r3, #2
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	f001 f88f 	bl	800193c <HAL_I2C_Mem_Read>
	gz_H = data[0];
 800081e:	7d3a      	ldrb	r2, [r7, #20]
 8000820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000822:	701a      	strb	r2, [r3, #0]
	gz_L = data[1];
 8000824:	7d7a      	ldrb	r2, [r7, #21]
 8000826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000828:	701a      	strb	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <_ZN4UARTC1EP20__UART_HandleTypeDef>:
#include "UART.h"

// Constructor implementation
UART::UART(UART_HandleTypeDef *huart) : uartHandle(huart) {}
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	22ff      	movs	r2, #255	@ 0xff
 8000846:	711a      	strb	r2, [r3, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b0a5      	sub	sp, #148	@ 0x94
 800085c:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	MPU9250 mpu(&hi2c1); // Instantiate MPU9250 with the I2C handle
 800085e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000862:	4934      	ldr	r1, [pc, #208]	@ (8000934 <main+0xdc>)
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fe83 	bl	8000570 <_ZN7MPU9250C1EP17I2C_HandleTypeDef>
	mpu.initialize();
 800086a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fef7 	bl	8000662 <_ZN7MPU925010initializeEv>

	// UART configuration
	UART tele(&huart2);
 8000874:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000878:	492f      	ldr	r1, [pc, #188]	@ (8000938 <main+0xe0>)
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffd9 	bl	8000832 <_ZN4UARTC1EP20__UART_HandleTypeDef>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fb04 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f85c 	bl	8000940 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f000 f932 	bl	8000af0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800088c:	f000 f902 	bl	8000a94 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000890:	f000 f8cc 	bl	8000a2c <_ZL12MX_I2C1_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Read sensor data
	  mpu.read_raw_accelerometer(ax_H, ax_L, ay_H, ay_L, az_H, az_L);
 8000894:	f107 0411 	add.w	r4, r7, #17
 8000898:	f107 0212 	add.w	r2, r7, #18
 800089c:	f107 0113 	add.w	r1, r7, #19
 80008a0:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80008a4:	f107 030e 	add.w	r3, r7, #14
 80008a8:	9302      	str	r3, [sp, #8]
 80008aa:	f107 030f 	add.w	r3, r7, #15
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	4623      	mov	r3, r4
 80008b8:	f7ff feec 	bl	8000694 <_ZN7MPU925022read_raw_accelerometerERhS0_S0_S0_S0_S0_>
	  mpu.read_raw_gyroscope(gx_H, gx_L, gy_H, gy_L, gz_H, gz_L);
 80008bc:	f107 040b 	add.w	r4, r7, #11
 80008c0:	f107 020c 	add.w	r2, r7, #12
 80008c4:	f107 010d 	add.w	r1, r7, #13
 80008c8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	9302      	str	r3, [sp, #8]
 80008d2:	f107 0309 	add.w	r3, r7, #9
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	f107 030a 	add.w	r3, r7, #10
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	4623      	mov	r3, r4
 80008e0:	f7ff ff51 	bl	8000786 <_ZN7MPU925018read_raw_gyroscopeERhS0_S0_S0_S0_S0_>
	  // Combine high and low bytes into 16-bit signed integers
	  //int16_t ax = (int16_t)((ax_H << 8) | ax_L);
	  //int16_t ay = (int16_t)((ay_H << 8) | ay_L);
	  //int16_t az = (int16_t)((az_H << 8) | az_L);

	  mpu.readGyroscope(ax, ay, az);
 80008e4:	1cbb      	adds	r3, r7, #2
 80008e6:	1d3a      	adds	r2, r7, #4
 80008e8:	1db9      	adds	r1, r7, #6
 80008ea:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80008ee:	f7ff ff21 	bl	8000734 <_ZN7MPU925013readGyroscopeERsS0_S0_>

	  // Format the data into a string
	  int len = snprintf((char *)buffer, sizeof(buffer), "ax=%d, ay=%d, az=%d\r\n", ax, ay, az);
 80008f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f6:	4619      	mov	r1, r3
 80008f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008fc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000900:	f107 0014 	add.w	r0, r7, #20
 8000904:	9201      	str	r2, [sp, #4]
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	460b      	mov	r3, r1
 800090a:	4a0c      	ldr	r2, [pc, #48]	@ (800093c <main+0xe4>)
 800090c:	2140      	movs	r1, #64	@ 0x40
 800090e:	f002 fe9f 	bl	8003650 <sniprintf>
 8000912:	67f8      	str	r0, [r7, #124]	@ 0x7c

	  // Transmit the data over UART
	  HAL_UART_Transmit(&huart2, buffer, len, HAL_MAX_DELAY);
 8000914:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000916:	b29a      	uxth	r2, r3
 8000918:	f107 0114 	add.w	r1, r7, #20
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <main+0xe0>)
 8000922:	f002 fad9 	bl	8002ed8 <HAL_UART_Transmit>

	  // Delay for a while (e.g., 500 ms)
	  HAL_Delay(500);
 8000926:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800092a:	f000 fb21 	bl	8000f70 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800092e:	bf00      	nop
 8000930:	e7b0      	b.n	8000894 <main+0x3c>
 8000932:	bf00      	nop
 8000934:	20000078 	.word	0x20000078
 8000938:	200000cc 	.word	0x200000cc
 800093c:	08003fd0 	.word	0x08003fd0

08000940 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	@ 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	@ 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f002 feb2 	bl	80036b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b2e      	ldr	r3, [pc, #184]	@ (8000a24 <_Z18SystemClock_Configv+0xe4>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	4a2d      	ldr	r2, [pc, #180]	@ (8000a24 <_Z18SystemClock_Configv+0xe4>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	@ 0x40
 8000974:	4b2b      	ldr	r3, [pc, #172]	@ (8000a24 <_Z18SystemClock_Configv+0xe4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <_Z18SystemClock_Configv+0xe8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800098c:	4a26      	ldr	r2, [pc, #152]	@ (8000a28 <_Z18SystemClock_Configv+0xe8>)
 800098e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <_Z18SystemClock_Configv+0xe8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b4:	2310      	movs	r3, #16
 80009b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009be:	2304      	movs	r3, #4
 80009c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009c2:	2307      	movs	r3, #7
 80009c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fd9c 	bl	8002508 <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	bf14      	ite	ne
 80009d6:	2301      	movne	r3, #1
 80009d8:	2300      	moveq	r3, #0
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80009e0:	f000 f8f4 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2302      	movs	r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	2102      	movs	r1, #2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fff9 	bl	80029f8 <HAL_RCC_ClockConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf14      	ite	ne
 8000a0c:	2301      	movne	r3, #1
 8000a0e:	2300      	moveq	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000a16:	f000 f8d9 	bl	8000bcc <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3750      	adds	r7, #80	@ 0x50
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a32:	4a16      	ldr	r2, [pc, #88]	@ (8000a8c <_ZL12MX_I2C1_Initv+0x60>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a38:	4a15      	ldr	r2, [pc, #84]	@ (8000a90 <_ZL12MX_I2C1_Initv+0x64>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <_ZL12MX_I2C1_Initv+0x5c>)
 8000a6a:	f000 fd29 	bl	80014c0 <HAL_I2C_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	bf14      	ite	ne
 8000a74:	2301      	movne	r3, #1
 8000a76:	2300      	moveq	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000a7e:	f000 f8a5 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000078 	.word	0x20000078
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	000186a0 	.word	0x000186a0

08000a94 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000a9a:	4a14      	ldr	r2, [pc, #80]	@ (8000aec <_ZL19MX_USART2_UART_Initv+0x58>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000acc:	f002 f9b4 	bl	8002e38 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bf14      	ite	ne
 8000ad6:	2301      	movne	r3, #1
 8000ad8:	2300      	moveq	r3, #0
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000ae0:	f000 f874 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000cc 	.word	0x200000cc
 8000aec:	40004400 	.word	0x40004400

08000af0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a25      	ldr	r2, [pc, #148]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <_ZL12MX_GPIO_Initv+0xd0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4812      	ldr	r0, [pc, #72]	@ (8000bc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000b7c:	f000 fc86 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b86:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000b98:	f000 faf4 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b9c:	2320      	movs	r3, #32
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8000bb4:	f000 fae6 	bl	8001184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020800 	.word	0x40020800

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <Error_Handler+0x8>

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c16:	2007      	movs	r0, #7
 8000c18:	f000 fa80 	bl	800111c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a19      	ldr	r2, [pc, #100]	@ (8000cac <HAL_I2C_MspInit+0x84>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12c      	bne.n	8000ca4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a17      	ldr	r2, [pc, #92]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6c:	2312      	movs	r3, #18
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <HAL_I2C_MspInit+0x8c>)
 8000c84:	f000 fa7e 	bl	8001184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	4a07      	ldr	r2, [pc, #28]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <HAL_I2C_MspInit+0x88>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	@ 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	@ (8000d3c <HAL_UART_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12b      	bne.n	8000d32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	4a17      	ldr	r2, [pc, #92]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a10      	ldr	r2, [pc, #64]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <HAL_UART_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d12:	230c      	movs	r3, #12
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d22:	2307      	movs	r3, #7
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <HAL_UART_MspInit+0x8c>)
 8000d2e:	f000 fa29 	bl	8001184 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	@ 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <NMI_Handler+0x4>

08000d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9e:	f000 f8c7 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f002 fc76 	bl	80036c8 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20018000 	.word	0x20018000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	20000114 	.word	0x20000114
 8000e10:	20000268 	.word	0x20000268

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e3c:	f7ff ffea 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	@ (8000e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f002 fc35 	bl	80036d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fcf5 	bl	8000858 <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e7c:	08004044 	.word	0x08004044
  ldr r2, =_sbss
 8000e80:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e84:	20000264 	.word	0x20000264

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	@ (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f931 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fe8a 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f93b 	bl	800116a <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f911 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000118 	.word	0x20000118

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000118 	.word	0x20000118

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	@ (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	@ (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	@ 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	@ 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff8e 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff47 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff5c 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff8e 	bl	8001070 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5d 	bl	800101c <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffb0 	bl	80010d8 <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e159      	b.n	8001454 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 8148 	bne.w	800144e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d130      	bne.n	8001238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 0201 	and.w	r2, r3, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80a2 	beq.w	800144e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b57      	ldr	r3, [pc, #348]	@ (800146c <HAL_GPIO_Init+0x2e8>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	4a56      	ldr	r2, [pc, #344]	@ (800146c <HAL_GPIO_Init+0x2e8>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001318:	6453      	str	r3, [r2, #68]	@ 0x44
 800131a:	4b54      	ldr	r3, [pc, #336]	@ (800146c <HAL_GPIO_Init+0x2e8>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001326:	4a52      	ldr	r2, [pc, #328]	@ (8001470 <HAL_GPIO_Init+0x2ec>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a49      	ldr	r2, [pc, #292]	@ (8001474 <HAL_GPIO_Init+0x2f0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x202>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a48      	ldr	r2, [pc, #288]	@ (8001478 <HAL_GPIO_Init+0x2f4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x1fe>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a47      	ldr	r2, [pc, #284]	@ (800147c <HAL_GPIO_Init+0x2f8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x1fa>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a46      	ldr	r2, [pc, #280]	@ (8001480 <HAL_GPIO_Init+0x2fc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x1f6>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a45      	ldr	r2, [pc, #276]	@ (8001484 <HAL_GPIO_Init+0x300>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x1f2>
 8001372:	2304      	movs	r3, #4
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x204>
 8001376:	2307      	movs	r3, #7
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x204>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x204>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x204>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x204>
 8001386:	2300      	movs	r3, #0
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001398:	4935      	ldr	r1, [pc, #212]	@ (8001470 <HAL_GPIO_Init+0x2ec>)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b38      	ldr	r3, [pc, #224]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f4:	4a24      	ldr	r2, [pc, #144]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fa:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <HAL_GPIO_Init+0x304>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141e:	4a1a      	ldr	r2, [pc, #104]	@ (8001488 <HAL_GPIO_Init+0x304>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <HAL_GPIO_Init+0x304>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001448:	4a0f      	ldr	r2, [pc, #60]	@ (8001488 <HAL_GPIO_Init+0x304>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	f67f aea2 	bls.w	80011a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3724      	adds	r7, #36	@ 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40013800 	.word	0x40013800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40021000 	.word	0x40021000
 8001488:	40013c00 	.word	0x40013c00

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e12b      	b.n	800172a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fb9e 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2224      	movs	r2, #36	@ 0x24
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001524:	f001 fc60 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8001528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a81      	ldr	r2, [pc, #516]	@ (8001734 <HAL_I2C_Init+0x274>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d807      	bhi.n	8001544 <HAL_I2C_Init+0x84>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4a80      	ldr	r2, [pc, #512]	@ (8001738 <HAL_I2C_Init+0x278>)
 8001538:	4293      	cmp	r3, r2
 800153a:	bf94      	ite	ls
 800153c:	2301      	movls	r3, #1
 800153e:	2300      	movhi	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	e006      	b.n	8001552 <HAL_I2C_Init+0x92>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4a7d      	ldr	r2, [pc, #500]	@ (800173c <HAL_I2C_Init+0x27c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	bf94      	ite	ls
 800154c:	2301      	movls	r3, #1
 800154e:	2300      	movhi	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0e7      	b.n	800172a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a78      	ldr	r2, [pc, #480]	@ (8001740 <HAL_I2C_Init+0x280>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0c9b      	lsrs	r3, r3, #18
 8001564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	430a      	orrs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4a6a      	ldr	r2, [pc, #424]	@ (8001734 <HAL_I2C_Init+0x274>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d802      	bhi.n	8001594 <HAL_I2C_Init+0xd4>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3301      	adds	r3, #1
 8001592:	e009      	b.n	80015a8 <HAL_I2C_Init+0xe8>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	4a69      	ldr	r2, [pc, #420]	@ (8001744 <HAL_I2C_Init+0x284>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	3301      	adds	r3, #1
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	495c      	ldr	r1, [pc, #368]	@ (8001734 <HAL_I2C_Init+0x274>)
 80015c4:	428b      	cmp	r3, r1
 80015c6:	d819      	bhi.n	80015fc <HAL_I2C_Init+0x13c>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e59      	subs	r1, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d6:	1c59      	adds	r1, r3, #1
 80015d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015dc:	400b      	ands	r3, r1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <HAL_I2C_Init+0x138>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1e59      	subs	r1, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80015f0:	3301      	adds	r3, #1
 80015f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f6:	e051      	b.n	800169c <HAL_I2C_Init+0x1dc>
 80015f8:	2304      	movs	r3, #4
 80015fa:	e04f      	b.n	800169c <HAL_I2C_Init+0x1dc>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d111      	bne.n	8001628 <HAL_I2C_Init+0x168>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1e58      	subs	r0, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	440b      	add	r3, r1
 8001612:	fbb0 f3f3 	udiv	r3, r0, r3
 8001616:	3301      	adds	r3, #1
 8001618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	e012      	b.n	800164e <HAL_I2C_Init+0x18e>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1e58      	subs	r0, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	0099      	lsls	r1, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	fbb0 f3f3 	udiv	r3, r0, r3
 800163e:	3301      	adds	r3, #1
 8001640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf0c      	ite	eq
 8001648:	2301      	moveq	r3, #1
 800164a:	2300      	movne	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_Init+0x196>
 8001652:	2301      	movs	r3, #1
 8001654:	e022      	b.n	800169c <HAL_I2C_Init+0x1dc>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10e      	bne.n	800167c <HAL_I2C_Init+0x1bc>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1e58      	subs	r0, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6859      	ldr	r1, [r3, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	440b      	add	r3, r1
 800166c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001670:	3301      	adds	r3, #1
 8001672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800167a:	e00f      	b.n	800169c <HAL_I2C_Init+0x1dc>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1e58      	subs	r0, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	0099      	lsls	r1, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001692:	3301      	adds	r3, #1
 8001694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	6809      	ldr	r1, [r1, #0]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6911      	ldr	r1, [r2, #16]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68d2      	ldr	r2, [r2, #12]
 80016d6:	4311      	orrs	r1, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	430b      	orrs	r3, r1
 80016de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2220      	movs	r2, #32
 8001716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	000186a0 	.word	0x000186a0
 8001738:	001e847f 	.word	0x001e847f
 800173c:	003d08ff 	.word	0x003d08ff
 8001740:	431bde83 	.word	0x431bde83
 8001744:	10624dd3 	.word	0x10624dd3

08001748 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	817b      	strh	r3, [r7, #10]
 800175a:	460b      	mov	r3, r1
 800175c:	813b      	strh	r3, [r7, #8]
 800175e:	4613      	mov	r3, r2
 8001760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001762:	f7ff fbf9 	bl	8000f58 <HAL_GetTick>
 8001766:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b20      	cmp	r3, #32
 8001772:	f040 80d9 	bne.w	8001928 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2319      	movs	r3, #25
 800177c:	2201      	movs	r2, #1
 800177e:	496d      	ldr	r1, [pc, #436]	@ (8001934 <HAL_I2C_Mem_Write+0x1ec>)
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fc8b 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800178c:	2302      	movs	r3, #2
 800178e:	e0cc      	b.n	800192a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_I2C_Mem_Write+0x56>
 800179a:	2302      	movs	r3, #2
 800179c:	e0c5      	b.n	800192a <HAL_I2C_Mem_Write+0x1e2>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d007      	beq.n	80017c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2221      	movs	r2, #33	@ 0x21
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2240      	movs	r2, #64	@ 0x40
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a3a      	ldr	r2, [r7, #32]
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4a4d      	ldr	r2, [pc, #308]	@ (8001938 <HAL_I2C_Mem_Write+0x1f0>)
 8001804:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001806:	88f8      	ldrh	r0, [r7, #6]
 8001808:	893a      	ldrh	r2, [r7, #8]
 800180a:	8979      	ldrh	r1, [r7, #10]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	4603      	mov	r3, r0
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fac2 	bl	8001da0 <I2C_RequestMemoryWrite>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d052      	beq.n	80018c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e081      	b.n	800192a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 fd50 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00d      	beq.n	8001852 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	2b04      	cmp	r3, #4
 800183c:	d107      	bne.n	800184e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800184c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e06b      	b.n	800192a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186c:	3b01      	subs	r3, #1
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	3b01      	subs	r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b04      	cmp	r3, #4
 800188e:	d11b      	bne.n	80018c8 <HAL_I2C_Mem_Write+0x180>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001894:	2b00      	cmp	r3, #0
 8001896:	d017      	beq.n	80018c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	781a      	ldrb	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1aa      	bne.n	8001826 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fd43 	bl	8002360 <I2C_WaitOnBTFFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00d      	beq.n	80018fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d107      	bne.n	80018f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e016      	b.n	800192a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800190a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001928:	2302      	movs	r3, #2
  }
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	00100002 	.word	0x00100002
 8001938:	ffff0000 	.word	0xffff0000

0800193c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	@ 0x30
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	817b      	strh	r3, [r7, #10]
 800194e:	460b      	mov	r3, r1
 8001950:	813b      	strh	r3, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001956:	f7ff faff 	bl	8000f58 <HAL_GetTick>
 800195a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b20      	cmp	r3, #32
 8001966:	f040 8214 	bne.w	8001d92 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2319      	movs	r3, #25
 8001970:	2201      	movs	r2, #1
 8001972:	497b      	ldr	r1, [pc, #492]	@ (8001b60 <HAL_I2C_Mem_Read+0x224>)
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fb91 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001980:	2302      	movs	r3, #2
 8001982:	e207      	b.n	8001d94 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_I2C_Mem_Read+0x56>
 800198e:	2302      	movs	r3, #2
 8001990:	e200      	b.n	8001d94 <HAL_I2C_Mem_Read+0x458>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d007      	beq.n	80019b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2222      	movs	r2, #34	@ 0x22
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2240      	movs	r2, #64	@ 0x40
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b64 <HAL_I2C_Mem_Read+0x228>)
 80019f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019fa:	88f8      	ldrh	r0, [r7, #6]
 80019fc:	893a      	ldrh	r2, [r7, #8]
 80019fe:	8979      	ldrh	r1, [r7, #10]
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4603      	mov	r3, r0
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fa5e 	bl	8001ecc <I2C_RequestMemoryRead>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e1bc      	b.n	8001d94 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	623b      	str	r3, [r7, #32]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	623b      	str	r3, [r7, #32]
 8001a36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e190      	b.n	8001d6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d11b      	bne.n	8001a8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e170      	b.n	8001d6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d11b      	bne.n	8001aca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ab0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	e150      	b.n	8001d6c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ae0:	e144      	b.n	8001d6c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	f200 80f1 	bhi.w	8001cce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d123      	bne.n	8001b3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 fc79 	bl	80023f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e145      	b.n	8001d94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b3a:	e117      	b.n	8001d6c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d14e      	bne.n	8001be2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4906      	ldr	r1, [pc, #24]	@ (8001b68 <HAL_I2C_Mem_Read+0x22c>)
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 faa4 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e11a      	b.n	8001d94 <HAL_I2C_Mem_Read+0x458>
 8001b5e:	bf00      	nop
 8001b60:	00100002 	.word	0x00100002
 8001b64:	ffff0000 	.word	0xffff0000
 8001b68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001be0:	e0c4      	b.n	8001d6c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be8:	2200      	movs	r2, #0
 8001bea:	496c      	ldr	r1, [pc, #432]	@ (8001d9c <HAL_I2C_Mem_Read+0x460>)
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 fa55 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0cb      	b.n	8001d94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c44:	2200      	movs	r2, #0
 8001c46:	4955      	ldr	r1, [pc, #340]	@ (8001d9c <HAL_I2C_Mem_Read+0x460>)
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fa27 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e09d      	b.n	8001d94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ccc:	e04e      	b.n	8001d6c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fb8c 	bl	80023f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e058      	b.n	8001d94 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d124      	bne.n	8001d6c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d107      	bne.n	8001d3a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d38:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f aeb6 	bne.w	8001ae2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001d92:	2302      	movs	r3, #2
  }
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3728      	adds	r7, #40	@ 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	00010004 	.word	0x00010004

08001da0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	460b      	mov	r3, r1
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f960 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00d      	beq.n	8001dfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001df0:	d103      	bne.n	8001dfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e05f      	b.n	8001ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dfe:	897b      	ldrh	r3, [r7, #10]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	6a3a      	ldr	r2, [r7, #32]
 8001e12:	492d      	ldr	r1, [pc, #180]	@ (8001ec8 <I2C_RequestMemoryWrite+0x128>)
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f9bb 	bl	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e04c      	b.n	8001ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e3c:	6a39      	ldr	r1, [r7, #32]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fa46 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00d      	beq.n	8001e66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d107      	bne.n	8001e62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e02b      	b.n	8001ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e6c:	893b      	ldrh	r3, [r7, #8]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	e021      	b.n	8001ebc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e78:	893b      	ldrh	r3, [r7, #8]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fa20 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00d      	beq.n	8001eb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d107      	bne.n	8001eae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e005      	b.n	8001ebe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb2:	893b      	ldrh	r3, [r7, #8]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	00010002 	.word	0x00010002

08001ecc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	813b      	strh	r3, [r7, #8]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f8c2 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00d      	beq.n	8001f3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f2c:	d103      	bne.n	8001f36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0aa      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f3a:	897b      	ldrh	r3, [r7, #10]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	6a3a      	ldr	r2, [r7, #32]
 8001f4e:	4952      	ldr	r1, [pc, #328]	@ (8002098 <I2C_RequestMemoryRead+0x1cc>)
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f91d 	bl	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e097      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f9a8 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00d      	beq.n	8001fa2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d107      	bne.n	8001f9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e076      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fa8:	893b      	ldrh	r3, [r7, #8]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	e021      	b.n	8001ff8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fb4:	893b      	ldrh	r3, [r7, #8]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f982 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d107      	bne.n	8001fea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e050      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fee:	893b      	ldrh	r3, [r7, #8]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ffa:	6a39      	ldr	r1, [r7, #32]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f967 	bl	80022d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	2b04      	cmp	r3, #4
 800200e:	d107      	bne.n	8002020 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800201e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e035      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002032:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	2200      	movs	r2, #0
 800203c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f82b 	bl	800209c <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800205a:	d103      	bne.n	8002064 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002062:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e013      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002068:	897b      	ldrh	r3, [r7, #10]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	b2da      	uxtb	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	6a3a      	ldr	r2, [r7, #32]
 800207c:	4906      	ldr	r1, [pc, #24]	@ (8002098 <I2C_RequestMemoryRead+0x1cc>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f886 	bl	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	00010002 	.word	0x00010002

0800209c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ac:	e048      	b.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d044      	beq.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b6:	f7fe ff4f 	bl	8000f58 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d302      	bcc.n	80020cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d139      	bne.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10d      	bne.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	43da      	mvns	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4013      	ands	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	e00c      	b.n	800210c <I2C_WaitOnFlagUntilTimeout+0x70>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	429a      	cmp	r2, r3
 8002110:	d116      	bne.n	8002140 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e023      	b.n	8002188 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	0c1b      	lsrs	r3, r3, #16
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10d      	bne.n	8002166 <I2C_WaitOnFlagUntilTimeout+0xca>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	43da      	mvns	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4013      	ands	r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	e00c      	b.n	8002180 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	43da      	mvns	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4013      	ands	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	429a      	cmp	r2, r3
 8002184:	d093      	beq.n	80020ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800219e:	e071      	b.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ae:	d123      	bne.n	80021f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	f043 0204 	orr.w	r2, r3, #4
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e067      	b.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fe:	d041      	beq.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002200:	f7fe feaa 	bl	8000f58 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	429a      	cmp	r2, r3
 800220e:	d302      	bcc.n	8002216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d136      	bne.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10c      	bne.n	800223a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4013      	ands	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	e00b      	b.n	8002252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	43da      	mvns	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4013      	ands	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	f043 0220 	orr.w	r2, r3, #32
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e021      	b.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	0c1b      	lsrs	r3, r3, #16
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d10c      	bne.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	43da      	mvns	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e00b      	b.n	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4013      	ands	r3, r2
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bf14      	ite	ne
 80022ba:	2301      	movne	r3, #1
 80022bc:	2300      	moveq	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f47f af6d 	bne.w	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022dc:	e034      	b.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f8e3 	bl	80024aa <I2C_IsAcknowledgeFailed>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e034      	b.n	8002358 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d028      	beq.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f6:	f7fe fe2f 	bl	8000f58 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	429a      	cmp	r2, r3
 8002304:	d302      	bcc.n	800230c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11d      	bne.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002316:	2b80      	cmp	r3, #128	@ 0x80
 8002318:	d016      	beq.n	8002348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e007      	b.n	8002358 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002352:	2b80      	cmp	r3, #128	@ 0x80
 8002354:	d1c3      	bne.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800236c:	e034      	b.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f89b 	bl	80024aa <I2C_IsAcknowledgeFailed>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e034      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d028      	beq.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7fe fde7 	bl	8000f58 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11d      	bne.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d016      	beq.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e007      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d1c3      	bne.n	800236e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023fc:	e049      	b.n	8002492 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b10      	cmp	r3, #16
 800240a:	d119      	bne.n	8002440 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0210 	mvn.w	r2, #16
 8002414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e030      	b.n	80024a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002440:	f7fe fd8a 	bl	8000f58 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	429a      	cmp	r2, r3
 800244e:	d302      	bcc.n	8002456 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11d      	bne.n	8002492 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002460:	2b40      	cmp	r3, #64	@ 0x40
 8002462:	d016      	beq.n	8002492 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f043 0220 	orr.w	r2, r3, #32
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e007      	b.n	80024a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249c:	2b40      	cmp	r3, #64	@ 0x40
 800249e:	d1ae      	bne.n	80023fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c0:	d11b      	bne.n	80024fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	f043 0204 	orr.w	r2, r3, #4
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e267      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d075      	beq.n	8002612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002526:	4b88      	ldr	r3, [pc, #544]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b04      	cmp	r3, #4
 8002530:	d00c      	beq.n	800254c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002532:	4b85      	ldr	r3, [pc, #532]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800253a:	2b08      	cmp	r3, #8
 800253c:	d112      	bne.n	8002564 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253e:	4b82      	ldr	r3, [pc, #520]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002546:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800254a:	d10b      	bne.n	8002564 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	4b7e      	ldr	r3, [pc, #504]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05b      	beq.n	8002610 <HAL_RCC_OscConfig+0x108>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d157      	bne.n	8002610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e242      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256c:	d106      	bne.n	800257c <HAL_RCC_OscConfig+0x74>
 800256e:	4b76      	ldr	r3, [pc, #472]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a75      	ldr	r2, [pc, #468]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e01d      	b.n	80025b8 <HAL_RCC_OscConfig+0xb0>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x98>
 8002586:	4b70      	ldr	r3, [pc, #448]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6f      	ldr	r2, [pc, #444]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b6d      	ldr	r3, [pc, #436]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6c      	ldr	r2, [pc, #432]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0xb0>
 80025a0:	4b69      	ldr	r3, [pc, #420]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a68      	ldr	r2, [pc, #416]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b66      	ldr	r3, [pc, #408]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a65      	ldr	r2, [pc, #404]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fcca 	bl	8000f58 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fcc6 	bl	8000f58 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	@ 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e207      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	4b5b      	ldr	r3, [pc, #364]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0xc0>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fcb6 	bl	8000f58 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7fe fcb2 	bl	8000f58 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	@ 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1f3      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	4b51      	ldr	r3, [pc, #324]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0xe8>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d063      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800261e:	4b4a      	ldr	r3, [pc, #296]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262a:	4b47      	ldr	r3, [pc, #284]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002632:	2b08      	cmp	r3, #8
 8002634:	d11c      	bne.n	8002670 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002636:	4b44      	ldr	r3, [pc, #272]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d116      	bne.n	8002670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	4b41      	ldr	r3, [pc, #260]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_RCC_OscConfig+0x152>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e1c7      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b3b      	ldr	r3, [pc, #236]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4937      	ldr	r1, [pc, #220]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266e:	e03a      	b.n	80026e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002678:	4b34      	ldr	r3, [pc, #208]	@ (800274c <HAL_RCC_OscConfig+0x244>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe fc6b 	bl	8000f58 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002686:	f7fe fc67 	bl	8000f58 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e1a8      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	4b2b      	ldr	r3, [pc, #172]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a4:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4925      	ldr	r1, [pc, #148]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
 80026b8:	e015      	b.n	80026e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ba:	4b24      	ldr	r3, [pc, #144]	@ (800274c <HAL_RCC_OscConfig+0x244>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fc4a 	bl	8000f58 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c8:	f7fe fc46 	bl	8000f58 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e187      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d036      	beq.n	8002760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <HAL_RCC_OscConfig+0x248>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fc2a 	bl	8000f58 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002708:	f7fe fc26 	bl	8000f58 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e167      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800271c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x200>
 8002726:	e01b      	b.n	8002760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002728:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_RCC_OscConfig+0x248>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7fe fc13 	bl	8000f58 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	e00e      	b.n	8002754 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002736:	f7fe fc0f 	bl	8000f58 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d907      	bls.n	8002754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e150      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
 8002748:	40023800 	.word	0x40023800
 800274c:	42470000 	.word	0x42470000
 8002750:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	4b88      	ldr	r3, [pc, #544]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ea      	bne.n	8002736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8097 	beq.w	800289c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b81      	ldr	r3, [pc, #516]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	4b7d      	ldr	r3, [pc, #500]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	4a7c      	ldr	r2, [pc, #496]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	@ 0x40
 800278e:	4b7a      	ldr	r3, [pc, #488]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b77      	ldr	r3, [pc, #476]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027aa:	4b74      	ldr	r3, [pc, #464]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a73      	ldr	r2, [pc, #460]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7fe fbcf 	bl	8000f58 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7fe fbcb 	bl	8000f58 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e10c      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b6a      	ldr	r3, [pc, #424]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x2ea>
 80027e4:	4b64      	ldr	r3, [pc, #400]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	4a63      	ldr	r2, [pc, #396]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x324>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x30c>
 80027fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	@ 0x70
 8002806:	4b5c      	ldr	r3, [pc, #368]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280a:	4a5b      	ldr	r2, [pc, #364]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	@ 0x70
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0x324>
 8002814:	4b58      	ldr	r3, [pc, #352]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	4a57      	ldr	r2, [pc, #348]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002820:	4b55      	ldr	r3, [pc, #340]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002824:	4a54      	ldr	r2, [pc, #336]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002826:	f023 0304 	bic.w	r3, r3, #4
 800282a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7fe fb90 	bl	8000f58 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe fb8c 	bl	8000f58 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0cb      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	4b49      	ldr	r3, [pc, #292]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ee      	beq.n	800283c <HAL_RCC_OscConfig+0x334>
 800285e:	e014      	b.n	800288a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002860:	f7fe fb7a 	bl	8000f58 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe fb76 	bl	8000f58 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0b5      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287e:	4b3e      	ldr	r3, [pc, #248]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ee      	bne.n	8002868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002890:	4b39      	ldr	r3, [pc, #228]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	4a38      	ldr	r2, [pc, #224]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800289a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a1 	beq.w	80029e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a6:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d05c      	beq.n	800296c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d141      	bne.n	800293e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b31      	ldr	r3, [pc, #196]	@ (8002980 <HAL_RCC_OscConfig+0x478>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fb4a 	bl	8000f58 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fb46 	bl	8000f58 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e087      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	4b27      	ldr	r3, [pc, #156]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	019b      	lsls	r3, r3, #6
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	3b01      	subs	r3, #1
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	491b      	ldr	r1, [pc, #108]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002910:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_RCC_OscConfig+0x478>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe fb1f 	bl	8000f58 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291e:	f7fe fb1b 	bl	8000f58 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e05c      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x416>
 800293c:	e054      	b.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_RCC_OscConfig+0x478>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe fb08 	bl	8000f58 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fb04 	bl	8000f58 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e045      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x444>
 800296a:	e03d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e038      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000
 8002980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002984:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_RCC_OscConfig+0x4ec>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d028      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d121      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d11a      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b4:	4013      	ands	r3, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029bc:	4293      	cmp	r3, r2
 80029be:	d111      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	3b01      	subs	r3, #1
 80029ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800

080029f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0cc      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b68      	ldr	r3, [pc, #416]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d90c      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b65      	ldr	r3, [pc, #404]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b63      	ldr	r3, [pc, #396]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a4c:	4b59      	ldr	r3, [pc, #356]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a58      	ldr	r2, [pc, #352]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a64:	4b53      	ldr	r3, [pc, #332]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a52      	ldr	r2, [pc, #328]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b50      	ldr	r3, [pc, #320]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	494d      	ldr	r1, [pc, #308]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d044      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d119      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e06f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e067      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b37      	ldr	r3, [pc, #220]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4934      	ldr	r1, [pc, #208]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fa36 	bl	8000f58 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe fa32 	bl	8000f58 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e04f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d20c      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e032      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4916      	ldr	r1, [pc, #88]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6a:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	490e      	ldr	r1, [pc, #56]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7e:	f000 f821 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	490a      	ldr	r1, [pc, #40]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	5ccb      	ldrb	r3, [r1, r3]
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe f996 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08003fe8 	.word	0x08003fe8
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc8:	b094      	sub	sp, #80	@ 0x50
 8002bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bdc:	4b79      	ldr	r3, [pc, #484]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d00d      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x40>
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	f200 80e1 	bhi.w	8002db0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bf6:	e0db      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b73      	ldr	r3, [pc, #460]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bfc:	e0db      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bfe:	4b73      	ldr	r3, [pc, #460]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x208>)
 8002c00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c02:	e0d8      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c04:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d063      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c2e:	2300      	movs	r3, #0
 8002c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c36:	4622      	mov	r2, r4
 8002c38:	462b      	mov	r3, r5
 8002c3a:	f04f 0000 	mov.w	r0, #0
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	0159      	lsls	r1, r3, #5
 8002c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c48:	0150      	lsls	r0, r2, #5
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4621      	mov	r1, r4
 8002c50:	1a51      	subs	r1, r2, r1
 8002c52:	6139      	str	r1, [r7, #16]
 8002c54:	4629      	mov	r1, r5
 8002c56:	eb63 0301 	sbc.w	r3, r3, r1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c68:	4659      	mov	r1, fp
 8002c6a:	018b      	lsls	r3, r1, #6
 8002c6c:	4651      	mov	r1, sl
 8002c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c72:	4651      	mov	r1, sl
 8002c74:	018a      	lsls	r2, r1, #6
 8002c76:	4651      	mov	r1, sl
 8002c78:	ebb2 0801 	subs.w	r8, r2, r1
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c96:	4690      	mov	r8, r2
 8002c98:	4699      	mov	r9, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	eb18 0303 	adds.w	r3, r8, r3
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	462b      	mov	r3, r5
 8002ca4:	eb49 0303 	adc.w	r3, r9, r3
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	024b      	lsls	r3, r1, #9
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	024a      	lsls	r2, r1, #9
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cca:	2200      	movs	r2, #0
 8002ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cd4:	f7fd fad4 	bl	8000280 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce0:	e058      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce2:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	4611      	mov	r1, r2
 8002cee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cfc:	4642      	mov	r2, r8
 8002cfe:	464b      	mov	r3, r9
 8002d00:	f04f 0000 	mov.w	r0, #0
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	0159      	lsls	r1, r3, #5
 8002d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0e:	0150      	lsls	r0, r2, #5
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4641      	mov	r1, r8
 8002d16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d34:	ebb2 040a 	subs.w	r4, r2, sl
 8002d38:	eb63 050b 	sbc.w	r5, r3, fp
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	00eb      	lsls	r3, r5, #3
 8002d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4a:	00e2      	lsls	r2, r4, #3
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	4643      	mov	r3, r8
 8002d52:	18e3      	adds	r3, r4, r3
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	464b      	mov	r3, r9
 8002d58:	eb45 0303 	adc.w	r3, r5, r3
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	028b      	lsls	r3, r1, #10
 8002d6e:	4621      	mov	r1, r4
 8002d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d74:	4621      	mov	r1, r4
 8002d76:	028a      	lsls	r2, r1, #10
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	61fa      	str	r2, [r7, #28]
 8002d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d88:	f7fd fa7a 	bl	8000280 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002da4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3750      	adds	r7, #80	@ 0x50
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dec:	f7ff fff0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0a9b      	lsrs	r3, r3, #10
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	@ (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	08003ff8 	.word	0x08003ff8

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e14:	f7ff ffdc 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0b5b      	lsrs	r3, r3, #13
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	@ (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08003ff8 	.word	0x08003ff8

08002e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e042      	b.n	8002ed0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fd ff2a 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	@ 0x24
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f973 	bl	8003168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	@ 0x28
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d175      	bne.n	8002fe4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_UART_Transmit+0x2c>
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e06e      	b.n	8002fe6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2221      	movs	r2, #33	@ 0x21
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f16:	f7fe f81f 	bl	8000f58 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	88fa      	ldrh	r2, [r7, #6]
 8002f26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f30:	d108      	bne.n	8002f44 <HAL_UART_Transmit+0x6c>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	e003      	b.n	8002f4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f4c:	e02e      	b.n	8002fac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2200      	movs	r2, #0
 8002f56:	2180      	movs	r1, #128	@ 0x80
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f848 	bl	8002fee <UART_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e03a      	b.n	8002fe6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10b      	bne.n	8002f8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	3302      	adds	r3, #2
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e007      	b.n	8002f9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1cb      	bne.n	8002f4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2140      	movs	r1, #64	@ 0x40
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f814 	bl	8002fee <UART_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e006      	b.n	8002fe6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffe:	e03b      	b.n	8003078 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d037      	beq.n	8003078 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003008:	f7fd ffa6 	bl	8000f58 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <UART_WaitOnFlagUntilTimeout+0x30>
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e03a      	b.n	8003098 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d023      	beq.n	8003078 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b80      	cmp	r3, #128	@ 0x80
 8003034:	d020      	beq.n	8003078 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b40      	cmp	r3, #64	@ 0x40
 800303a:	d01d      	beq.n	8003078 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b08      	cmp	r3, #8
 8003048:	d116      	bne.n	8003078 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f81d 	bl	80030a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2208      	movs	r2, #8
 800306a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e00f      	b.n	8003098 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	429a      	cmp	r2, r3
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	429a      	cmp	r2, r3
 8003094:	d0b4      	beq.n	8003000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b095      	sub	sp, #84	@ 0x54
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80030ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e5      	bne.n	80030a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3314      	adds	r3, #20
 80030e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3314      	adds	r3, #20
 80030fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003104:	e841 2300 	strex	r3, r2, [r1]
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e5      	bne.n	80030dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	2b01      	cmp	r3, #1
 8003116:	d119      	bne.n	800314c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	330c      	adds	r3, #12
 800311e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	60bb      	str	r3, [r7, #8]
   return(result);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f023 0310 	bic.w	r3, r3, #16
 800312e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003138:	61ba      	str	r2, [r7, #24]
 800313a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6979      	ldr	r1, [r7, #20]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	613b      	str	r3, [r7, #16]
   return(result);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e5      	bne.n	8003118 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800315a:	bf00      	nop
 800315c:	3754      	adds	r7, #84	@ 0x54
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800316c:	b0c0      	sub	sp, #256	@ 0x100
 800316e:	af00      	add	r7, sp, #0
 8003170:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003184:	68d9      	ldr	r1, [r3, #12]
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	ea40 0301 	orr.w	r3, r0, r1
 8003190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	431a      	orrs	r2, r3
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031c0:	f021 010c 	bic.w	r1, r1, #12
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031ce:	430b      	orrs	r3, r1
 80031d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e2:	6999      	ldr	r1, [r3, #24]
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	ea40 0301 	orr.w	r3, r0, r1
 80031ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003434 <UART_SetConfig+0x2cc>)
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d005      	beq.n	8003208 <UART_SetConfig+0xa0>
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b8d      	ldr	r3, [pc, #564]	@ (8003438 <UART_SetConfig+0x2d0>)
 8003204:	429a      	cmp	r2, r3
 8003206:	d104      	bne.n	8003212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7ff fe02 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 800320c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003210:	e003      	b.n	800321a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003212:	f7ff fde9 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8003216:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003224:	f040 810c 	bne.w	8003440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800322c:	2200      	movs	r2, #0
 800322e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003232:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800323a:	4622      	mov	r2, r4
 800323c:	462b      	mov	r3, r5
 800323e:	1891      	adds	r1, r2, r2
 8003240:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003242:	415b      	adcs	r3, r3
 8003244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800324a:	4621      	mov	r1, r4
 800324c:	eb12 0801 	adds.w	r8, r2, r1
 8003250:	4629      	mov	r1, r5
 8003252:	eb43 0901 	adc.w	r9, r3, r1
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326a:	4690      	mov	r8, r2
 800326c:	4699      	mov	r9, r3
 800326e:	4623      	mov	r3, r4
 8003270:	eb18 0303 	adds.w	r3, r8, r3
 8003274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003278:	462b      	mov	r3, r5
 800327a:	eb49 0303 	adc.w	r3, r9, r3
 800327e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800328e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003296:	460b      	mov	r3, r1
 8003298:	18db      	adds	r3, r3, r3
 800329a:	653b      	str	r3, [r7, #80]	@ 0x50
 800329c:	4613      	mov	r3, r2
 800329e:	eb42 0303 	adc.w	r3, r2, r3
 80032a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80032a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032ac:	f7fc ffe8 	bl	8000280 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4b61      	ldr	r3, [pc, #388]	@ (800343c <UART_SetConfig+0x2d4>)
 80032b6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	011c      	lsls	r4, r3, #4
 80032be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	1891      	adds	r1, r2, r2
 80032d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032d8:	415b      	adcs	r3, r3
 80032da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032e0:	4641      	mov	r1, r8
 80032e2:	eb12 0a01 	adds.w	sl, r2, r1
 80032e6:	4649      	mov	r1, r9
 80032e8:	eb43 0b01 	adc.w	fp, r3, r1
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003300:	4692      	mov	sl, r2
 8003302:	469b      	mov	fp, r3
 8003304:	4643      	mov	r3, r8
 8003306:	eb1a 0303 	adds.w	r3, sl, r3
 800330a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800330e:	464b      	mov	r3, r9
 8003310:	eb4b 0303 	adc.w	r3, fp, r3
 8003314:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003324:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800332c:	460b      	mov	r3, r1
 800332e:	18db      	adds	r3, r3, r3
 8003330:	643b      	str	r3, [r7, #64]	@ 0x40
 8003332:	4613      	mov	r3, r2
 8003334:	eb42 0303 	adc.w	r3, r2, r3
 8003338:	647b      	str	r3, [r7, #68]	@ 0x44
 800333a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800333e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003342:	f7fc ff9d 	bl	8000280 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4611      	mov	r1, r2
 800334c:	4b3b      	ldr	r3, [pc, #236]	@ (800343c <UART_SetConfig+0x2d4>)
 800334e:	fba3 2301 	umull	r2, r3, r3, r1
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2264      	movs	r2, #100	@ 0x64
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	1acb      	subs	r3, r1, r3
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003362:	4b36      	ldr	r3, [pc, #216]	@ (800343c <UART_SetConfig+0x2d4>)
 8003364:	fba3 2302 	umull	r2, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003370:	441c      	add	r4, r3
 8003372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800337c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003384:	4642      	mov	r2, r8
 8003386:	464b      	mov	r3, r9
 8003388:	1891      	adds	r1, r2, r2
 800338a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800338c:	415b      	adcs	r3, r3
 800338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003394:	4641      	mov	r1, r8
 8003396:	1851      	adds	r1, r2, r1
 8003398:	6339      	str	r1, [r7, #48]	@ 0x30
 800339a:	4649      	mov	r1, r9
 800339c:	414b      	adcs	r3, r1
 800339e:	637b      	str	r3, [r7, #52]	@ 0x34
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033ac:	4659      	mov	r1, fp
 80033ae:	00cb      	lsls	r3, r1, #3
 80033b0:	4651      	mov	r1, sl
 80033b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b6:	4651      	mov	r1, sl
 80033b8:	00ca      	lsls	r2, r1, #3
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	4603      	mov	r3, r0
 80033c0:	4642      	mov	r2, r8
 80033c2:	189b      	adds	r3, r3, r2
 80033c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033c8:	464b      	mov	r3, r9
 80033ca:	460a      	mov	r2, r1
 80033cc:	eb42 0303 	adc.w	r3, r2, r3
 80033d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033e8:	460b      	mov	r3, r1
 80033ea:	18db      	adds	r3, r3, r3
 80033ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ee:	4613      	mov	r3, r2
 80033f0:	eb42 0303 	adc.w	r3, r2, r3
 80033f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033fe:	f7fc ff3f 	bl	8000280 <__aeabi_uldivmod>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4b0d      	ldr	r3, [pc, #52]	@ (800343c <UART_SetConfig+0x2d4>)
 8003408:	fba3 1302 	umull	r1, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	2164      	movs	r1, #100	@ 0x64
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	3332      	adds	r3, #50	@ 0x32
 800341a:	4a08      	ldr	r2, [pc, #32]	@ (800343c <UART_SetConfig+0x2d4>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	f003 0207 	and.w	r2, r3, #7
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4422      	add	r2, r4
 800342e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003430:	e106      	b.n	8003640 <UART_SetConfig+0x4d8>
 8003432:	bf00      	nop
 8003434:	40011000 	.word	0x40011000
 8003438:	40011400 	.word	0x40011400
 800343c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003444:	2200      	movs	r2, #0
 8003446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800344a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800344e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003452:	4642      	mov	r2, r8
 8003454:	464b      	mov	r3, r9
 8003456:	1891      	adds	r1, r2, r2
 8003458:	6239      	str	r1, [r7, #32]
 800345a:	415b      	adcs	r3, r3
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
 800345e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003462:	4641      	mov	r1, r8
 8003464:	1854      	adds	r4, r2, r1
 8003466:	4649      	mov	r1, r9
 8003468:	eb43 0501 	adc.w	r5, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	00eb      	lsls	r3, r5, #3
 8003476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800347a:	00e2      	lsls	r2, r4, #3
 800347c:	4614      	mov	r4, r2
 800347e:	461d      	mov	r5, r3
 8003480:	4643      	mov	r3, r8
 8003482:	18e3      	adds	r3, r4, r3
 8003484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003488:	464b      	mov	r3, r9
 800348a:	eb45 0303 	adc.w	r3, r5, r3
 800348e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800349e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034ae:	4629      	mov	r1, r5
 80034b0:	008b      	lsls	r3, r1, #2
 80034b2:	4621      	mov	r1, r4
 80034b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b8:	4621      	mov	r1, r4
 80034ba:	008a      	lsls	r2, r1, #2
 80034bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034c0:	f7fc fede 	bl	8000280 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4b60      	ldr	r3, [pc, #384]	@ (800364c <UART_SetConfig+0x4e4>)
 80034ca:	fba3 2302 	umull	r2, r3, r3, r2
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	011c      	lsls	r4, r3, #4
 80034d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	1891      	adds	r1, r2, r2
 80034ea:	61b9      	str	r1, [r7, #24]
 80034ec:	415b      	adcs	r3, r3
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f4:	4641      	mov	r1, r8
 80034f6:	1851      	adds	r1, r2, r1
 80034f8:	6139      	str	r1, [r7, #16]
 80034fa:	4649      	mov	r1, r9
 80034fc:	414b      	adcs	r3, r1
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800350c:	4659      	mov	r1, fp
 800350e:	00cb      	lsls	r3, r1, #3
 8003510:	4651      	mov	r1, sl
 8003512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003516:	4651      	mov	r1, sl
 8003518:	00ca      	lsls	r2, r1, #3
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	4603      	mov	r3, r0
 8003520:	4642      	mov	r2, r8
 8003522:	189b      	adds	r3, r3, r2
 8003524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003528:	464b      	mov	r3, r9
 800352a:	460a      	mov	r2, r1
 800352c:	eb42 0303 	adc.w	r3, r2, r3
 8003530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800353e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800354c:	4649      	mov	r1, r9
 800354e:	008b      	lsls	r3, r1, #2
 8003550:	4641      	mov	r1, r8
 8003552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003556:	4641      	mov	r1, r8
 8003558:	008a      	lsls	r2, r1, #2
 800355a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800355e:	f7fc fe8f 	bl	8000280 <__aeabi_uldivmod>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4611      	mov	r1, r2
 8003568:	4b38      	ldr	r3, [pc, #224]	@ (800364c <UART_SetConfig+0x4e4>)
 800356a:	fba3 2301 	umull	r2, r3, r3, r1
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2264      	movs	r2, #100	@ 0x64
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	1acb      	subs	r3, r1, r3
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	3332      	adds	r3, #50	@ 0x32
 800357c:	4a33      	ldr	r2, [pc, #204]	@ (800364c <UART_SetConfig+0x4e4>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003588:	441c      	add	r4, r3
 800358a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800358e:	2200      	movs	r2, #0
 8003590:	673b      	str	r3, [r7, #112]	@ 0x70
 8003592:	677a      	str	r2, [r7, #116]	@ 0x74
 8003594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003598:	4642      	mov	r2, r8
 800359a:	464b      	mov	r3, r9
 800359c:	1891      	adds	r1, r2, r2
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	415b      	adcs	r3, r3
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a8:	4641      	mov	r1, r8
 80035aa:	1851      	adds	r1, r2, r1
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	4649      	mov	r1, r9
 80035b0:	414b      	adcs	r3, r1
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035c0:	4659      	mov	r1, fp
 80035c2:	00cb      	lsls	r3, r1, #3
 80035c4:	4651      	mov	r1, sl
 80035c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ca:	4651      	mov	r1, sl
 80035cc:	00ca      	lsls	r2, r1, #3
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	4642      	mov	r2, r8
 80035d6:	189b      	adds	r3, r3, r2
 80035d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035da:	464b      	mov	r3, r9
 80035dc:	460a      	mov	r2, r1
 80035de:	eb42 0303 	adc.w	r3, r2, r3
 80035e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035fc:	4649      	mov	r1, r9
 80035fe:	008b      	lsls	r3, r1, #2
 8003600:	4641      	mov	r1, r8
 8003602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003606:	4641      	mov	r1, r8
 8003608:	008a      	lsls	r2, r1, #2
 800360a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800360e:	f7fc fe37 	bl	8000280 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <UART_SetConfig+0x4e4>)
 8003618:	fba3 1302 	umull	r1, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2164      	movs	r1, #100	@ 0x64
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	3332      	adds	r3, #50	@ 0x32
 800362a:	4a08      	ldr	r2, [pc, #32]	@ (800364c <UART_SetConfig+0x4e4>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	f003 020f 	and.w	r2, r3, #15
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4422      	add	r2, r4
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003646:	46bd      	mov	sp, r7
 8003648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800364c:	51eb851f 	.word	0x51eb851f

08003650 <sniprintf>:
 8003650:	b40c      	push	{r2, r3}
 8003652:	b530      	push	{r4, r5, lr}
 8003654:	4b17      	ldr	r3, [pc, #92]	@ (80036b4 <sniprintf+0x64>)
 8003656:	1e0c      	subs	r4, r1, #0
 8003658:	681d      	ldr	r5, [r3, #0]
 800365a:	b09d      	sub	sp, #116	@ 0x74
 800365c:	da08      	bge.n	8003670 <sniprintf+0x20>
 800365e:	238b      	movs	r3, #139	@ 0x8b
 8003660:	602b      	str	r3, [r5, #0]
 8003662:	f04f 30ff 	mov.w	r0, #4294967295
 8003666:	b01d      	add	sp, #116	@ 0x74
 8003668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800366c:	b002      	add	sp, #8
 800366e:	4770      	bx	lr
 8003670:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003674:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003678:	bf14      	ite	ne
 800367a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800367e:	4623      	moveq	r3, r4
 8003680:	9304      	str	r3, [sp, #16]
 8003682:	9307      	str	r3, [sp, #28]
 8003684:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003688:	9002      	str	r0, [sp, #8]
 800368a:	9006      	str	r0, [sp, #24]
 800368c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003690:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003692:	ab21      	add	r3, sp, #132	@ 0x84
 8003694:	a902      	add	r1, sp, #8
 8003696:	4628      	mov	r0, r5
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	f000 f9a3 	bl	80039e4 <_svfiprintf_r>
 800369e:	1c43      	adds	r3, r0, #1
 80036a0:	bfbc      	itt	lt
 80036a2:	238b      	movlt	r3, #139	@ 0x8b
 80036a4:	602b      	strlt	r3, [r5, #0]
 80036a6:	2c00      	cmp	r4, #0
 80036a8:	d0dd      	beq.n	8003666 <sniprintf+0x16>
 80036aa:	9b02      	ldr	r3, [sp, #8]
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e7d9      	b.n	8003666 <sniprintf+0x16>
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c

080036b8 <memset>:
 80036b8:	4402      	add	r2, r0
 80036ba:	4603      	mov	r3, r0
 80036bc:	4293      	cmp	r3, r2
 80036be:	d100      	bne.n	80036c2 <memset+0xa>
 80036c0:	4770      	bx	lr
 80036c2:	f803 1b01 	strb.w	r1, [r3], #1
 80036c6:	e7f9      	b.n	80036bc <memset+0x4>

080036c8 <__errno>:
 80036c8:	4b01      	ldr	r3, [pc, #4]	@ (80036d0 <__errno+0x8>)
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	2000000c 	.word	0x2000000c

080036d4 <__libc_init_array>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	4d0d      	ldr	r5, [pc, #52]	@ (800370c <__libc_init_array+0x38>)
 80036d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003710 <__libc_init_array+0x3c>)
 80036da:	1b64      	subs	r4, r4, r5
 80036dc:	10a4      	asrs	r4, r4, #2
 80036de:	2600      	movs	r6, #0
 80036e0:	42a6      	cmp	r6, r4
 80036e2:	d109      	bne.n	80036f8 <__libc_init_array+0x24>
 80036e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003714 <__libc_init_array+0x40>)
 80036e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003718 <__libc_init_array+0x44>)
 80036e8:	f000 fc66 	bl	8003fb8 <_init>
 80036ec:	1b64      	subs	r4, r4, r5
 80036ee:	10a4      	asrs	r4, r4, #2
 80036f0:	2600      	movs	r6, #0
 80036f2:	42a6      	cmp	r6, r4
 80036f4:	d105      	bne.n	8003702 <__libc_init_array+0x2e>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036fc:	4798      	blx	r3
 80036fe:	3601      	adds	r6, #1
 8003700:	e7ee      	b.n	80036e0 <__libc_init_array+0xc>
 8003702:	f855 3b04 	ldr.w	r3, [r5], #4
 8003706:	4798      	blx	r3
 8003708:	3601      	adds	r6, #1
 800370a:	e7f2      	b.n	80036f2 <__libc_init_array+0x1e>
 800370c:	0800403c 	.word	0x0800403c
 8003710:	0800403c 	.word	0x0800403c
 8003714:	0800403c 	.word	0x0800403c
 8003718:	08004040 	.word	0x08004040

0800371c <__retarget_lock_acquire_recursive>:
 800371c:	4770      	bx	lr

0800371e <__retarget_lock_release_recursive>:
 800371e:	4770      	bx	lr

08003720 <memcpy>:
 8003720:	440a      	add	r2, r1
 8003722:	4291      	cmp	r1, r2
 8003724:	f100 33ff 	add.w	r3, r0, #4294967295
 8003728:	d100      	bne.n	800372c <memcpy+0xc>
 800372a:	4770      	bx	lr
 800372c:	b510      	push	{r4, lr}
 800372e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003736:	4291      	cmp	r1, r2
 8003738:	d1f9      	bne.n	800372e <memcpy+0xe>
 800373a:	bd10      	pop	{r4, pc}

0800373c <_free_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4605      	mov	r5, r0
 8003740:	2900      	cmp	r1, #0
 8003742:	d041      	beq.n	80037c8 <_free_r+0x8c>
 8003744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003748:	1f0c      	subs	r4, r1, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	bfb8      	it	lt
 800374e:	18e4      	addlt	r4, r4, r3
 8003750:	f000 f8e0 	bl	8003914 <__malloc_lock>
 8003754:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <_free_r+0x90>)
 8003756:	6813      	ldr	r3, [r2, #0]
 8003758:	b933      	cbnz	r3, 8003768 <_free_r+0x2c>
 800375a:	6063      	str	r3, [r4, #4]
 800375c:	6014      	str	r4, [r2, #0]
 800375e:	4628      	mov	r0, r5
 8003760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003764:	f000 b8dc 	b.w	8003920 <__malloc_unlock>
 8003768:	42a3      	cmp	r3, r4
 800376a:	d908      	bls.n	800377e <_free_r+0x42>
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	1821      	adds	r1, r4, r0
 8003770:	428b      	cmp	r3, r1
 8003772:	bf01      	itttt	eq
 8003774:	6819      	ldreq	r1, [r3, #0]
 8003776:	685b      	ldreq	r3, [r3, #4]
 8003778:	1809      	addeq	r1, r1, r0
 800377a:	6021      	streq	r1, [r4, #0]
 800377c:	e7ed      	b.n	800375a <_free_r+0x1e>
 800377e:	461a      	mov	r2, r3
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	b10b      	cbz	r3, 8003788 <_free_r+0x4c>
 8003784:	42a3      	cmp	r3, r4
 8003786:	d9fa      	bls.n	800377e <_free_r+0x42>
 8003788:	6811      	ldr	r1, [r2, #0]
 800378a:	1850      	adds	r0, r2, r1
 800378c:	42a0      	cmp	r0, r4
 800378e:	d10b      	bne.n	80037a8 <_free_r+0x6c>
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	4401      	add	r1, r0
 8003794:	1850      	adds	r0, r2, r1
 8003796:	4283      	cmp	r3, r0
 8003798:	6011      	str	r1, [r2, #0]
 800379a:	d1e0      	bne.n	800375e <_free_r+0x22>
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	6053      	str	r3, [r2, #4]
 80037a2:	4408      	add	r0, r1
 80037a4:	6010      	str	r0, [r2, #0]
 80037a6:	e7da      	b.n	800375e <_free_r+0x22>
 80037a8:	d902      	bls.n	80037b0 <_free_r+0x74>
 80037aa:	230c      	movs	r3, #12
 80037ac:	602b      	str	r3, [r5, #0]
 80037ae:	e7d6      	b.n	800375e <_free_r+0x22>
 80037b0:	6820      	ldr	r0, [r4, #0]
 80037b2:	1821      	adds	r1, r4, r0
 80037b4:	428b      	cmp	r3, r1
 80037b6:	bf04      	itt	eq
 80037b8:	6819      	ldreq	r1, [r3, #0]
 80037ba:	685b      	ldreq	r3, [r3, #4]
 80037bc:	6063      	str	r3, [r4, #4]
 80037be:	bf04      	itt	eq
 80037c0:	1809      	addeq	r1, r1, r0
 80037c2:	6021      	streq	r1, [r4, #0]
 80037c4:	6054      	str	r4, [r2, #4]
 80037c6:	e7ca      	b.n	800375e <_free_r+0x22>
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
 80037ca:	bf00      	nop
 80037cc:	20000260 	.word	0x20000260

080037d0 <sbrk_aligned>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003810 <sbrk_aligned+0x40>)
 80037d4:	460c      	mov	r4, r1
 80037d6:	6831      	ldr	r1, [r6, #0]
 80037d8:	4605      	mov	r5, r0
 80037da:	b911      	cbnz	r1, 80037e2 <sbrk_aligned+0x12>
 80037dc:	f000 fba6 	bl	8003f2c <_sbrk_r>
 80037e0:	6030      	str	r0, [r6, #0]
 80037e2:	4621      	mov	r1, r4
 80037e4:	4628      	mov	r0, r5
 80037e6:	f000 fba1 	bl	8003f2c <_sbrk_r>
 80037ea:	1c43      	adds	r3, r0, #1
 80037ec:	d103      	bne.n	80037f6 <sbrk_aligned+0x26>
 80037ee:	f04f 34ff 	mov.w	r4, #4294967295
 80037f2:	4620      	mov	r0, r4
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
 80037f6:	1cc4      	adds	r4, r0, #3
 80037f8:	f024 0403 	bic.w	r4, r4, #3
 80037fc:	42a0      	cmp	r0, r4
 80037fe:	d0f8      	beq.n	80037f2 <sbrk_aligned+0x22>
 8003800:	1a21      	subs	r1, r4, r0
 8003802:	4628      	mov	r0, r5
 8003804:	f000 fb92 	bl	8003f2c <_sbrk_r>
 8003808:	3001      	adds	r0, #1
 800380a:	d1f2      	bne.n	80037f2 <sbrk_aligned+0x22>
 800380c:	e7ef      	b.n	80037ee <sbrk_aligned+0x1e>
 800380e:	bf00      	nop
 8003810:	2000025c 	.word	0x2000025c

08003814 <_malloc_r>:
 8003814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003818:	1ccd      	adds	r5, r1, #3
 800381a:	f025 0503 	bic.w	r5, r5, #3
 800381e:	3508      	adds	r5, #8
 8003820:	2d0c      	cmp	r5, #12
 8003822:	bf38      	it	cc
 8003824:	250c      	movcc	r5, #12
 8003826:	2d00      	cmp	r5, #0
 8003828:	4606      	mov	r6, r0
 800382a:	db01      	blt.n	8003830 <_malloc_r+0x1c>
 800382c:	42a9      	cmp	r1, r5
 800382e:	d904      	bls.n	800383a <_malloc_r+0x26>
 8003830:	230c      	movs	r3, #12
 8003832:	6033      	str	r3, [r6, #0]
 8003834:	2000      	movs	r0, #0
 8003836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800383a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003910 <_malloc_r+0xfc>
 800383e:	f000 f869 	bl	8003914 <__malloc_lock>
 8003842:	f8d8 3000 	ldr.w	r3, [r8]
 8003846:	461c      	mov	r4, r3
 8003848:	bb44      	cbnz	r4, 800389c <_malloc_r+0x88>
 800384a:	4629      	mov	r1, r5
 800384c:	4630      	mov	r0, r6
 800384e:	f7ff ffbf 	bl	80037d0 <sbrk_aligned>
 8003852:	1c43      	adds	r3, r0, #1
 8003854:	4604      	mov	r4, r0
 8003856:	d158      	bne.n	800390a <_malloc_r+0xf6>
 8003858:	f8d8 4000 	ldr.w	r4, [r8]
 800385c:	4627      	mov	r7, r4
 800385e:	2f00      	cmp	r7, #0
 8003860:	d143      	bne.n	80038ea <_malloc_r+0xd6>
 8003862:	2c00      	cmp	r4, #0
 8003864:	d04b      	beq.n	80038fe <_malloc_r+0xea>
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	4639      	mov	r1, r7
 800386a:	4630      	mov	r0, r6
 800386c:	eb04 0903 	add.w	r9, r4, r3
 8003870:	f000 fb5c 	bl	8003f2c <_sbrk_r>
 8003874:	4581      	cmp	r9, r0
 8003876:	d142      	bne.n	80038fe <_malloc_r+0xea>
 8003878:	6821      	ldr	r1, [r4, #0]
 800387a:	1a6d      	subs	r5, r5, r1
 800387c:	4629      	mov	r1, r5
 800387e:	4630      	mov	r0, r6
 8003880:	f7ff ffa6 	bl	80037d0 <sbrk_aligned>
 8003884:	3001      	adds	r0, #1
 8003886:	d03a      	beq.n	80038fe <_malloc_r+0xea>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	442b      	add	r3, r5
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	f8d8 3000 	ldr.w	r3, [r8]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	bb62      	cbnz	r2, 80038f0 <_malloc_r+0xdc>
 8003896:	f8c8 7000 	str.w	r7, [r8]
 800389a:	e00f      	b.n	80038bc <_malloc_r+0xa8>
 800389c:	6822      	ldr	r2, [r4, #0]
 800389e:	1b52      	subs	r2, r2, r5
 80038a0:	d420      	bmi.n	80038e4 <_malloc_r+0xd0>
 80038a2:	2a0b      	cmp	r2, #11
 80038a4:	d917      	bls.n	80038d6 <_malloc_r+0xc2>
 80038a6:	1961      	adds	r1, r4, r5
 80038a8:	42a3      	cmp	r3, r4
 80038aa:	6025      	str	r5, [r4, #0]
 80038ac:	bf18      	it	ne
 80038ae:	6059      	strne	r1, [r3, #4]
 80038b0:	6863      	ldr	r3, [r4, #4]
 80038b2:	bf08      	it	eq
 80038b4:	f8c8 1000 	streq.w	r1, [r8]
 80038b8:	5162      	str	r2, [r4, r5]
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	4630      	mov	r0, r6
 80038be:	f000 f82f 	bl	8003920 <__malloc_unlock>
 80038c2:	f104 000b 	add.w	r0, r4, #11
 80038c6:	1d23      	adds	r3, r4, #4
 80038c8:	f020 0007 	bic.w	r0, r0, #7
 80038cc:	1ac2      	subs	r2, r0, r3
 80038ce:	bf1c      	itt	ne
 80038d0:	1a1b      	subne	r3, r3, r0
 80038d2:	50a3      	strne	r3, [r4, r2]
 80038d4:	e7af      	b.n	8003836 <_malloc_r+0x22>
 80038d6:	6862      	ldr	r2, [r4, #4]
 80038d8:	42a3      	cmp	r3, r4
 80038da:	bf0c      	ite	eq
 80038dc:	f8c8 2000 	streq.w	r2, [r8]
 80038e0:	605a      	strne	r2, [r3, #4]
 80038e2:	e7eb      	b.n	80038bc <_malloc_r+0xa8>
 80038e4:	4623      	mov	r3, r4
 80038e6:	6864      	ldr	r4, [r4, #4]
 80038e8:	e7ae      	b.n	8003848 <_malloc_r+0x34>
 80038ea:	463c      	mov	r4, r7
 80038ec:	687f      	ldr	r7, [r7, #4]
 80038ee:	e7b6      	b.n	800385e <_malloc_r+0x4a>
 80038f0:	461a      	mov	r2, r3
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	42a3      	cmp	r3, r4
 80038f6:	d1fb      	bne.n	80038f0 <_malloc_r+0xdc>
 80038f8:	2300      	movs	r3, #0
 80038fa:	6053      	str	r3, [r2, #4]
 80038fc:	e7de      	b.n	80038bc <_malloc_r+0xa8>
 80038fe:	230c      	movs	r3, #12
 8003900:	6033      	str	r3, [r6, #0]
 8003902:	4630      	mov	r0, r6
 8003904:	f000 f80c 	bl	8003920 <__malloc_unlock>
 8003908:	e794      	b.n	8003834 <_malloc_r+0x20>
 800390a:	6005      	str	r5, [r0, #0]
 800390c:	e7d6      	b.n	80038bc <_malloc_r+0xa8>
 800390e:	bf00      	nop
 8003910:	20000260 	.word	0x20000260

08003914 <__malloc_lock>:
 8003914:	4801      	ldr	r0, [pc, #4]	@ (800391c <__malloc_lock+0x8>)
 8003916:	f7ff bf01 	b.w	800371c <__retarget_lock_acquire_recursive>
 800391a:	bf00      	nop
 800391c:	20000258 	.word	0x20000258

08003920 <__malloc_unlock>:
 8003920:	4801      	ldr	r0, [pc, #4]	@ (8003928 <__malloc_unlock+0x8>)
 8003922:	f7ff befc 	b.w	800371e <__retarget_lock_release_recursive>
 8003926:	bf00      	nop
 8003928:	20000258 	.word	0x20000258

0800392c <__ssputs_r>:
 800392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	688e      	ldr	r6, [r1, #8]
 8003932:	461f      	mov	r7, r3
 8003934:	42be      	cmp	r6, r7
 8003936:	680b      	ldr	r3, [r1, #0]
 8003938:	4682      	mov	sl, r0
 800393a:	460c      	mov	r4, r1
 800393c:	4690      	mov	r8, r2
 800393e:	d82d      	bhi.n	800399c <__ssputs_r+0x70>
 8003940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003948:	d026      	beq.n	8003998 <__ssputs_r+0x6c>
 800394a:	6965      	ldr	r5, [r4, #20]
 800394c:	6909      	ldr	r1, [r1, #16]
 800394e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003952:	eba3 0901 	sub.w	r9, r3, r1
 8003956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800395a:	1c7b      	adds	r3, r7, #1
 800395c:	444b      	add	r3, r9
 800395e:	106d      	asrs	r5, r5, #1
 8003960:	429d      	cmp	r5, r3
 8003962:	bf38      	it	cc
 8003964:	461d      	movcc	r5, r3
 8003966:	0553      	lsls	r3, r2, #21
 8003968:	d527      	bpl.n	80039ba <__ssputs_r+0x8e>
 800396a:	4629      	mov	r1, r5
 800396c:	f7ff ff52 	bl	8003814 <_malloc_r>
 8003970:	4606      	mov	r6, r0
 8003972:	b360      	cbz	r0, 80039ce <__ssputs_r+0xa2>
 8003974:	6921      	ldr	r1, [r4, #16]
 8003976:	464a      	mov	r2, r9
 8003978:	f7ff fed2 	bl	8003720 <memcpy>
 800397c:	89a3      	ldrh	r3, [r4, #12]
 800397e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003986:	81a3      	strh	r3, [r4, #12]
 8003988:	6126      	str	r6, [r4, #16]
 800398a:	6165      	str	r5, [r4, #20]
 800398c:	444e      	add	r6, r9
 800398e:	eba5 0509 	sub.w	r5, r5, r9
 8003992:	6026      	str	r6, [r4, #0]
 8003994:	60a5      	str	r5, [r4, #8]
 8003996:	463e      	mov	r6, r7
 8003998:	42be      	cmp	r6, r7
 800399a:	d900      	bls.n	800399e <__ssputs_r+0x72>
 800399c:	463e      	mov	r6, r7
 800399e:	6820      	ldr	r0, [r4, #0]
 80039a0:	4632      	mov	r2, r6
 80039a2:	4641      	mov	r1, r8
 80039a4:	f000 faa8 	bl	8003ef8 <memmove>
 80039a8:	68a3      	ldr	r3, [r4, #8]
 80039aa:	1b9b      	subs	r3, r3, r6
 80039ac:	60a3      	str	r3, [r4, #8]
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	4433      	add	r3, r6
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	2000      	movs	r0, #0
 80039b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ba:	462a      	mov	r2, r5
 80039bc:	f000 fac6 	bl	8003f4c <_realloc_r>
 80039c0:	4606      	mov	r6, r0
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d1e0      	bne.n	8003988 <__ssputs_r+0x5c>
 80039c6:	6921      	ldr	r1, [r4, #16]
 80039c8:	4650      	mov	r0, sl
 80039ca:	f7ff feb7 	bl	800373c <_free_r>
 80039ce:	230c      	movs	r3, #12
 80039d0:	f8ca 3000 	str.w	r3, [sl]
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	e7e9      	b.n	80039b6 <__ssputs_r+0x8a>
	...

080039e4 <_svfiprintf_r>:
 80039e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e8:	4698      	mov	r8, r3
 80039ea:	898b      	ldrh	r3, [r1, #12]
 80039ec:	061b      	lsls	r3, r3, #24
 80039ee:	b09d      	sub	sp, #116	@ 0x74
 80039f0:	4607      	mov	r7, r0
 80039f2:	460d      	mov	r5, r1
 80039f4:	4614      	mov	r4, r2
 80039f6:	d510      	bpl.n	8003a1a <_svfiprintf_r+0x36>
 80039f8:	690b      	ldr	r3, [r1, #16]
 80039fa:	b973      	cbnz	r3, 8003a1a <_svfiprintf_r+0x36>
 80039fc:	2140      	movs	r1, #64	@ 0x40
 80039fe:	f7ff ff09 	bl	8003814 <_malloc_r>
 8003a02:	6028      	str	r0, [r5, #0]
 8003a04:	6128      	str	r0, [r5, #16]
 8003a06:	b930      	cbnz	r0, 8003a16 <_svfiprintf_r+0x32>
 8003a08:	230c      	movs	r3, #12
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a10:	b01d      	add	sp, #116	@ 0x74
 8003a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a16:	2340      	movs	r3, #64	@ 0x40
 8003a18:	616b      	str	r3, [r5, #20]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a1e:	2320      	movs	r3, #32
 8003a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a28:	2330      	movs	r3, #48	@ 0x30
 8003a2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003bc8 <_svfiprintf_r+0x1e4>
 8003a2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a32:	f04f 0901 	mov.w	r9, #1
 8003a36:	4623      	mov	r3, r4
 8003a38:	469a      	mov	sl, r3
 8003a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a3e:	b10a      	cbz	r2, 8003a44 <_svfiprintf_r+0x60>
 8003a40:	2a25      	cmp	r2, #37	@ 0x25
 8003a42:	d1f9      	bne.n	8003a38 <_svfiprintf_r+0x54>
 8003a44:	ebba 0b04 	subs.w	fp, sl, r4
 8003a48:	d00b      	beq.n	8003a62 <_svfiprintf_r+0x7e>
 8003a4a:	465b      	mov	r3, fp
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	4629      	mov	r1, r5
 8003a50:	4638      	mov	r0, r7
 8003a52:	f7ff ff6b 	bl	800392c <__ssputs_r>
 8003a56:	3001      	adds	r0, #1
 8003a58:	f000 80a7 	beq.w	8003baa <_svfiprintf_r+0x1c6>
 8003a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a5e:	445a      	add	r2, fp
 8003a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a62:	f89a 3000 	ldrb.w	r3, [sl]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 809f 	beq.w	8003baa <_svfiprintf_r+0x1c6>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a76:	f10a 0a01 	add.w	sl, sl, #1
 8003a7a:	9304      	str	r3, [sp, #16]
 8003a7c:	9307      	str	r3, [sp, #28]
 8003a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a84:	4654      	mov	r4, sl
 8003a86:	2205      	movs	r2, #5
 8003a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a8c:	484e      	ldr	r0, [pc, #312]	@ (8003bc8 <_svfiprintf_r+0x1e4>)
 8003a8e:	f7fc fba7 	bl	80001e0 <memchr>
 8003a92:	9a04      	ldr	r2, [sp, #16]
 8003a94:	b9d8      	cbnz	r0, 8003ace <_svfiprintf_r+0xea>
 8003a96:	06d0      	lsls	r0, r2, #27
 8003a98:	bf44      	itt	mi
 8003a9a:	2320      	movmi	r3, #32
 8003a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aa0:	0711      	lsls	r1, r2, #28
 8003aa2:	bf44      	itt	mi
 8003aa4:	232b      	movmi	r3, #43	@ 0x2b
 8003aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8003aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ab0:	d015      	beq.n	8003ade <_svfiprintf_r+0xfa>
 8003ab2:	9a07      	ldr	r2, [sp, #28]
 8003ab4:	4654      	mov	r4, sl
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f04f 0c0a 	mov.w	ip, #10
 8003abc:	4621      	mov	r1, r4
 8003abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ac2:	3b30      	subs	r3, #48	@ 0x30
 8003ac4:	2b09      	cmp	r3, #9
 8003ac6:	d94b      	bls.n	8003b60 <_svfiprintf_r+0x17c>
 8003ac8:	b1b0      	cbz	r0, 8003af8 <_svfiprintf_r+0x114>
 8003aca:	9207      	str	r2, [sp, #28]
 8003acc:	e014      	b.n	8003af8 <_svfiprintf_r+0x114>
 8003ace:	eba0 0308 	sub.w	r3, r0, r8
 8003ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	9304      	str	r3, [sp, #16]
 8003ada:	46a2      	mov	sl, r4
 8003adc:	e7d2      	b.n	8003a84 <_svfiprintf_r+0xa0>
 8003ade:	9b03      	ldr	r3, [sp, #12]
 8003ae0:	1d19      	adds	r1, r3, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	9103      	str	r1, [sp, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bfbb      	ittet	lt
 8003aea:	425b      	neglt	r3, r3
 8003aec:	f042 0202 	orrlt.w	r2, r2, #2
 8003af0:	9307      	strge	r3, [sp, #28]
 8003af2:	9307      	strlt	r3, [sp, #28]
 8003af4:	bfb8      	it	lt
 8003af6:	9204      	strlt	r2, [sp, #16]
 8003af8:	7823      	ldrb	r3, [r4, #0]
 8003afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8003afc:	d10a      	bne.n	8003b14 <_svfiprintf_r+0x130>
 8003afe:	7863      	ldrb	r3, [r4, #1]
 8003b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b02:	d132      	bne.n	8003b6a <_svfiprintf_r+0x186>
 8003b04:	9b03      	ldr	r3, [sp, #12]
 8003b06:	1d1a      	adds	r2, r3, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	9203      	str	r2, [sp, #12]
 8003b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b10:	3402      	adds	r4, #2
 8003b12:	9305      	str	r3, [sp, #20]
 8003b14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003bd8 <_svfiprintf_r+0x1f4>
 8003b18:	7821      	ldrb	r1, [r4, #0]
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	4650      	mov	r0, sl
 8003b1e:	f7fc fb5f 	bl	80001e0 <memchr>
 8003b22:	b138      	cbz	r0, 8003b34 <_svfiprintf_r+0x150>
 8003b24:	9b04      	ldr	r3, [sp, #16]
 8003b26:	eba0 000a 	sub.w	r0, r0, sl
 8003b2a:	2240      	movs	r2, #64	@ 0x40
 8003b2c:	4082      	lsls	r2, r0
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	3401      	adds	r4, #1
 8003b32:	9304      	str	r3, [sp, #16]
 8003b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b38:	4824      	ldr	r0, [pc, #144]	@ (8003bcc <_svfiprintf_r+0x1e8>)
 8003b3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b3e:	2206      	movs	r2, #6
 8003b40:	f7fc fb4e 	bl	80001e0 <memchr>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d036      	beq.n	8003bb6 <_svfiprintf_r+0x1d2>
 8003b48:	4b21      	ldr	r3, [pc, #132]	@ (8003bd0 <_svfiprintf_r+0x1ec>)
 8003b4a:	bb1b      	cbnz	r3, 8003b94 <_svfiprintf_r+0x1b0>
 8003b4c:	9b03      	ldr	r3, [sp, #12]
 8003b4e:	3307      	adds	r3, #7
 8003b50:	f023 0307 	bic.w	r3, r3, #7
 8003b54:	3308      	adds	r3, #8
 8003b56:	9303      	str	r3, [sp, #12]
 8003b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b5a:	4433      	add	r3, r6
 8003b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b5e:	e76a      	b.n	8003a36 <_svfiprintf_r+0x52>
 8003b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b64:	460c      	mov	r4, r1
 8003b66:	2001      	movs	r0, #1
 8003b68:	e7a8      	b.n	8003abc <_svfiprintf_r+0xd8>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	3401      	adds	r4, #1
 8003b6e:	9305      	str	r3, [sp, #20]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f04f 0c0a 	mov.w	ip, #10
 8003b76:	4620      	mov	r0, r4
 8003b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b7c:	3a30      	subs	r2, #48	@ 0x30
 8003b7e:	2a09      	cmp	r2, #9
 8003b80:	d903      	bls.n	8003b8a <_svfiprintf_r+0x1a6>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0c6      	beq.n	8003b14 <_svfiprintf_r+0x130>
 8003b86:	9105      	str	r1, [sp, #20]
 8003b88:	e7c4      	b.n	8003b14 <_svfiprintf_r+0x130>
 8003b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b8e:	4604      	mov	r4, r0
 8003b90:	2301      	movs	r3, #1
 8003b92:	e7f0      	b.n	8003b76 <_svfiprintf_r+0x192>
 8003b94:	ab03      	add	r3, sp, #12
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	462a      	mov	r2, r5
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <_svfiprintf_r+0x1f0>)
 8003b9c:	a904      	add	r1, sp, #16
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	f3af 8000 	nop.w
 8003ba4:	1c42      	adds	r2, r0, #1
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	d1d6      	bne.n	8003b58 <_svfiprintf_r+0x174>
 8003baa:	89ab      	ldrh	r3, [r5, #12]
 8003bac:	065b      	lsls	r3, r3, #25
 8003bae:	f53f af2d 	bmi.w	8003a0c <_svfiprintf_r+0x28>
 8003bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bb4:	e72c      	b.n	8003a10 <_svfiprintf_r+0x2c>
 8003bb6:	ab03      	add	r3, sp, #12
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	462a      	mov	r2, r5
 8003bbc:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <_svfiprintf_r+0x1f0>)
 8003bbe:	a904      	add	r1, sp, #16
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	f000 f879 	bl	8003cb8 <_printf_i>
 8003bc6:	e7ed      	b.n	8003ba4 <_svfiprintf_r+0x1c0>
 8003bc8:	08004000 	.word	0x08004000
 8003bcc:	0800400a 	.word	0x0800400a
 8003bd0:	00000000 	.word	0x00000000
 8003bd4:	0800392d 	.word	0x0800392d
 8003bd8:	08004006 	.word	0x08004006

08003bdc <_printf_common>:
 8003bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be0:	4616      	mov	r6, r2
 8003be2:	4698      	mov	r8, r3
 8003be4:	688a      	ldr	r2, [r1, #8]
 8003be6:	690b      	ldr	r3, [r1, #16]
 8003be8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	bfb8      	it	lt
 8003bf0:	4613      	movlt	r3, r2
 8003bf2:	6033      	str	r3, [r6, #0]
 8003bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bf8:	4607      	mov	r7, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	b10a      	cbz	r2, 8003c02 <_printf_common+0x26>
 8003bfe:	3301      	adds	r3, #1
 8003c00:	6033      	str	r3, [r6, #0]
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	0699      	lsls	r1, r3, #26
 8003c06:	bf42      	ittt	mi
 8003c08:	6833      	ldrmi	r3, [r6, #0]
 8003c0a:	3302      	addmi	r3, #2
 8003c0c:	6033      	strmi	r3, [r6, #0]
 8003c0e:	6825      	ldr	r5, [r4, #0]
 8003c10:	f015 0506 	ands.w	r5, r5, #6
 8003c14:	d106      	bne.n	8003c24 <_printf_common+0x48>
 8003c16:	f104 0a19 	add.w	sl, r4, #25
 8003c1a:	68e3      	ldr	r3, [r4, #12]
 8003c1c:	6832      	ldr	r2, [r6, #0]
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	42ab      	cmp	r3, r5
 8003c22:	dc26      	bgt.n	8003c72 <_printf_common+0x96>
 8003c24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c28:	6822      	ldr	r2, [r4, #0]
 8003c2a:	3b00      	subs	r3, #0
 8003c2c:	bf18      	it	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	0692      	lsls	r2, r2, #26
 8003c32:	d42b      	bmi.n	8003c8c <_printf_common+0xb0>
 8003c34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c38:	4641      	mov	r1, r8
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	47c8      	blx	r9
 8003c3e:	3001      	adds	r0, #1
 8003c40:	d01e      	beq.n	8003c80 <_printf_common+0xa4>
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	6922      	ldr	r2, [r4, #16]
 8003c46:	f003 0306 	and.w	r3, r3, #6
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	bf02      	ittt	eq
 8003c4e:	68e5      	ldreq	r5, [r4, #12]
 8003c50:	6833      	ldreq	r3, [r6, #0]
 8003c52:	1aed      	subeq	r5, r5, r3
 8003c54:	68a3      	ldr	r3, [r4, #8]
 8003c56:	bf0c      	ite	eq
 8003c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c5c:	2500      	movne	r5, #0
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	bfc4      	itt	gt
 8003c62:	1a9b      	subgt	r3, r3, r2
 8003c64:	18ed      	addgt	r5, r5, r3
 8003c66:	2600      	movs	r6, #0
 8003c68:	341a      	adds	r4, #26
 8003c6a:	42b5      	cmp	r5, r6
 8003c6c:	d11a      	bne.n	8003ca4 <_printf_common+0xc8>
 8003c6e:	2000      	movs	r0, #0
 8003c70:	e008      	b.n	8003c84 <_printf_common+0xa8>
 8003c72:	2301      	movs	r3, #1
 8003c74:	4652      	mov	r2, sl
 8003c76:	4641      	mov	r1, r8
 8003c78:	4638      	mov	r0, r7
 8003c7a:	47c8      	blx	r9
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d103      	bne.n	8003c88 <_printf_common+0xac>
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c88:	3501      	adds	r5, #1
 8003c8a:	e7c6      	b.n	8003c1a <_printf_common+0x3e>
 8003c8c:	18e1      	adds	r1, r4, r3
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	2030      	movs	r0, #48	@ 0x30
 8003c92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c96:	4422      	add	r2, r4
 8003c98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	e7c7      	b.n	8003c34 <_printf_common+0x58>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	4641      	mov	r1, r8
 8003caa:	4638      	mov	r0, r7
 8003cac:	47c8      	blx	r9
 8003cae:	3001      	adds	r0, #1
 8003cb0:	d0e6      	beq.n	8003c80 <_printf_common+0xa4>
 8003cb2:	3601      	adds	r6, #1
 8003cb4:	e7d9      	b.n	8003c6a <_printf_common+0x8e>
	...

08003cb8 <_printf_i>:
 8003cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cbc:	7e0f      	ldrb	r7, [r1, #24]
 8003cbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cc0:	2f78      	cmp	r7, #120	@ 0x78
 8003cc2:	4691      	mov	r9, r2
 8003cc4:	4680      	mov	r8, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	469a      	mov	sl, r3
 8003cca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cce:	d807      	bhi.n	8003ce0 <_printf_i+0x28>
 8003cd0:	2f62      	cmp	r7, #98	@ 0x62
 8003cd2:	d80a      	bhi.n	8003cea <_printf_i+0x32>
 8003cd4:	2f00      	cmp	r7, #0
 8003cd6:	f000 80d2 	beq.w	8003e7e <_printf_i+0x1c6>
 8003cda:	2f58      	cmp	r7, #88	@ 0x58
 8003cdc:	f000 80b9 	beq.w	8003e52 <_printf_i+0x19a>
 8003ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ce4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ce8:	e03a      	b.n	8003d60 <_printf_i+0xa8>
 8003cea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cee:	2b15      	cmp	r3, #21
 8003cf0:	d8f6      	bhi.n	8003ce0 <_printf_i+0x28>
 8003cf2:	a101      	add	r1, pc, #4	@ (adr r1, 8003cf8 <_printf_i+0x40>)
 8003cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cf8:	08003d51 	.word	0x08003d51
 8003cfc:	08003d65 	.word	0x08003d65
 8003d00:	08003ce1 	.word	0x08003ce1
 8003d04:	08003ce1 	.word	0x08003ce1
 8003d08:	08003ce1 	.word	0x08003ce1
 8003d0c:	08003ce1 	.word	0x08003ce1
 8003d10:	08003d65 	.word	0x08003d65
 8003d14:	08003ce1 	.word	0x08003ce1
 8003d18:	08003ce1 	.word	0x08003ce1
 8003d1c:	08003ce1 	.word	0x08003ce1
 8003d20:	08003ce1 	.word	0x08003ce1
 8003d24:	08003e65 	.word	0x08003e65
 8003d28:	08003d8f 	.word	0x08003d8f
 8003d2c:	08003e1f 	.word	0x08003e1f
 8003d30:	08003ce1 	.word	0x08003ce1
 8003d34:	08003ce1 	.word	0x08003ce1
 8003d38:	08003e87 	.word	0x08003e87
 8003d3c:	08003ce1 	.word	0x08003ce1
 8003d40:	08003d8f 	.word	0x08003d8f
 8003d44:	08003ce1 	.word	0x08003ce1
 8003d48:	08003ce1 	.word	0x08003ce1
 8003d4c:	08003e27 	.word	0x08003e27
 8003d50:	6833      	ldr	r3, [r6, #0]
 8003d52:	1d1a      	adds	r2, r3, #4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6032      	str	r2, [r6, #0]
 8003d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d60:	2301      	movs	r3, #1
 8003d62:	e09d      	b.n	8003ea0 <_printf_i+0x1e8>
 8003d64:	6833      	ldr	r3, [r6, #0]
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	1d19      	adds	r1, r3, #4
 8003d6a:	6031      	str	r1, [r6, #0]
 8003d6c:	0606      	lsls	r6, r0, #24
 8003d6e:	d501      	bpl.n	8003d74 <_printf_i+0xbc>
 8003d70:	681d      	ldr	r5, [r3, #0]
 8003d72:	e003      	b.n	8003d7c <_printf_i+0xc4>
 8003d74:	0645      	lsls	r5, r0, #25
 8003d76:	d5fb      	bpl.n	8003d70 <_printf_i+0xb8>
 8003d78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d7c:	2d00      	cmp	r5, #0
 8003d7e:	da03      	bge.n	8003d88 <_printf_i+0xd0>
 8003d80:	232d      	movs	r3, #45	@ 0x2d
 8003d82:	426d      	negs	r5, r5
 8003d84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d88:	4859      	ldr	r0, [pc, #356]	@ (8003ef0 <_printf_i+0x238>)
 8003d8a:	230a      	movs	r3, #10
 8003d8c:	e011      	b.n	8003db2 <_printf_i+0xfa>
 8003d8e:	6821      	ldr	r1, [r4, #0]
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	0608      	lsls	r0, r1, #24
 8003d94:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d98:	d402      	bmi.n	8003da0 <_printf_i+0xe8>
 8003d9a:	0649      	lsls	r1, r1, #25
 8003d9c:	bf48      	it	mi
 8003d9e:	b2ad      	uxthmi	r5, r5
 8003da0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003da2:	4853      	ldr	r0, [pc, #332]	@ (8003ef0 <_printf_i+0x238>)
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	bf14      	ite	ne
 8003da8:	230a      	movne	r3, #10
 8003daa:	2308      	moveq	r3, #8
 8003dac:	2100      	movs	r1, #0
 8003dae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003db2:	6866      	ldr	r6, [r4, #4]
 8003db4:	60a6      	str	r6, [r4, #8]
 8003db6:	2e00      	cmp	r6, #0
 8003db8:	bfa2      	ittt	ge
 8003dba:	6821      	ldrge	r1, [r4, #0]
 8003dbc:	f021 0104 	bicge.w	r1, r1, #4
 8003dc0:	6021      	strge	r1, [r4, #0]
 8003dc2:	b90d      	cbnz	r5, 8003dc8 <_printf_i+0x110>
 8003dc4:	2e00      	cmp	r6, #0
 8003dc6:	d04b      	beq.n	8003e60 <_printf_i+0x1a8>
 8003dc8:	4616      	mov	r6, r2
 8003dca:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dce:	fb03 5711 	mls	r7, r3, r1, r5
 8003dd2:	5dc7      	ldrb	r7, [r0, r7]
 8003dd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dd8:	462f      	mov	r7, r5
 8003dda:	42bb      	cmp	r3, r7
 8003ddc:	460d      	mov	r5, r1
 8003dde:	d9f4      	bls.n	8003dca <_printf_i+0x112>
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d10b      	bne.n	8003dfc <_printf_i+0x144>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	07df      	lsls	r7, r3, #31
 8003de8:	d508      	bpl.n	8003dfc <_printf_i+0x144>
 8003dea:	6923      	ldr	r3, [r4, #16]
 8003dec:	6861      	ldr	r1, [r4, #4]
 8003dee:	4299      	cmp	r1, r3
 8003df0:	bfde      	ittt	le
 8003df2:	2330      	movle	r3, #48	@ 0x30
 8003df4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003df8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dfc:	1b92      	subs	r2, r2, r6
 8003dfe:	6122      	str	r2, [r4, #16]
 8003e00:	f8cd a000 	str.w	sl, [sp]
 8003e04:	464b      	mov	r3, r9
 8003e06:	aa03      	add	r2, sp, #12
 8003e08:	4621      	mov	r1, r4
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	f7ff fee6 	bl	8003bdc <_printf_common>
 8003e10:	3001      	adds	r0, #1
 8003e12:	d14a      	bne.n	8003eaa <_printf_i+0x1f2>
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	b004      	add	sp, #16
 8003e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	f043 0320 	orr.w	r3, r3, #32
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	4833      	ldr	r0, [pc, #204]	@ (8003ef4 <_printf_i+0x23c>)
 8003e28:	2778      	movs	r7, #120	@ 0x78
 8003e2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	6831      	ldr	r1, [r6, #0]
 8003e32:	061f      	lsls	r7, r3, #24
 8003e34:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e38:	d402      	bmi.n	8003e40 <_printf_i+0x188>
 8003e3a:	065f      	lsls	r7, r3, #25
 8003e3c:	bf48      	it	mi
 8003e3e:	b2ad      	uxthmi	r5, r5
 8003e40:	6031      	str	r1, [r6, #0]
 8003e42:	07d9      	lsls	r1, r3, #31
 8003e44:	bf44      	itt	mi
 8003e46:	f043 0320 	orrmi.w	r3, r3, #32
 8003e4a:	6023      	strmi	r3, [r4, #0]
 8003e4c:	b11d      	cbz	r5, 8003e56 <_printf_i+0x19e>
 8003e4e:	2310      	movs	r3, #16
 8003e50:	e7ac      	b.n	8003dac <_printf_i+0xf4>
 8003e52:	4827      	ldr	r0, [pc, #156]	@ (8003ef0 <_printf_i+0x238>)
 8003e54:	e7e9      	b.n	8003e2a <_printf_i+0x172>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	f023 0320 	bic.w	r3, r3, #32
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	e7f6      	b.n	8003e4e <_printf_i+0x196>
 8003e60:	4616      	mov	r6, r2
 8003e62:	e7bd      	b.n	8003de0 <_printf_i+0x128>
 8003e64:	6833      	ldr	r3, [r6, #0]
 8003e66:	6825      	ldr	r5, [r4, #0]
 8003e68:	6961      	ldr	r1, [r4, #20]
 8003e6a:	1d18      	adds	r0, r3, #4
 8003e6c:	6030      	str	r0, [r6, #0]
 8003e6e:	062e      	lsls	r6, r5, #24
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	d501      	bpl.n	8003e78 <_printf_i+0x1c0>
 8003e74:	6019      	str	r1, [r3, #0]
 8003e76:	e002      	b.n	8003e7e <_printf_i+0x1c6>
 8003e78:	0668      	lsls	r0, r5, #25
 8003e7a:	d5fb      	bpl.n	8003e74 <_printf_i+0x1bc>
 8003e7c:	8019      	strh	r1, [r3, #0]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6123      	str	r3, [r4, #16]
 8003e82:	4616      	mov	r6, r2
 8003e84:	e7bc      	b.n	8003e00 <_printf_i+0x148>
 8003e86:	6833      	ldr	r3, [r6, #0]
 8003e88:	1d1a      	adds	r2, r3, #4
 8003e8a:	6032      	str	r2, [r6, #0]
 8003e8c:	681e      	ldr	r6, [r3, #0]
 8003e8e:	6862      	ldr	r2, [r4, #4]
 8003e90:	2100      	movs	r1, #0
 8003e92:	4630      	mov	r0, r6
 8003e94:	f7fc f9a4 	bl	80001e0 <memchr>
 8003e98:	b108      	cbz	r0, 8003e9e <_printf_i+0x1e6>
 8003e9a:	1b80      	subs	r0, r0, r6
 8003e9c:	6060      	str	r0, [r4, #4]
 8003e9e:	6863      	ldr	r3, [r4, #4]
 8003ea0:	6123      	str	r3, [r4, #16]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ea8:	e7aa      	b.n	8003e00 <_printf_i+0x148>
 8003eaa:	6923      	ldr	r3, [r4, #16]
 8003eac:	4632      	mov	r2, r6
 8003eae:	4649      	mov	r1, r9
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	47d0      	blx	sl
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	d0ad      	beq.n	8003e14 <_printf_i+0x15c>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	079b      	lsls	r3, r3, #30
 8003ebc:	d413      	bmi.n	8003ee6 <_printf_i+0x22e>
 8003ebe:	68e0      	ldr	r0, [r4, #12]
 8003ec0:	9b03      	ldr	r3, [sp, #12]
 8003ec2:	4298      	cmp	r0, r3
 8003ec4:	bfb8      	it	lt
 8003ec6:	4618      	movlt	r0, r3
 8003ec8:	e7a6      	b.n	8003e18 <_printf_i+0x160>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	4632      	mov	r2, r6
 8003ece:	4649      	mov	r1, r9
 8003ed0:	4640      	mov	r0, r8
 8003ed2:	47d0      	blx	sl
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d09d      	beq.n	8003e14 <_printf_i+0x15c>
 8003ed8:	3501      	adds	r5, #1
 8003eda:	68e3      	ldr	r3, [r4, #12]
 8003edc:	9903      	ldr	r1, [sp, #12]
 8003ede:	1a5b      	subs	r3, r3, r1
 8003ee0:	42ab      	cmp	r3, r5
 8003ee2:	dcf2      	bgt.n	8003eca <_printf_i+0x212>
 8003ee4:	e7eb      	b.n	8003ebe <_printf_i+0x206>
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	f104 0619 	add.w	r6, r4, #25
 8003eec:	e7f5      	b.n	8003eda <_printf_i+0x222>
 8003eee:	bf00      	nop
 8003ef0:	08004011 	.word	0x08004011
 8003ef4:	08004022 	.word	0x08004022

08003ef8 <memmove>:
 8003ef8:	4288      	cmp	r0, r1
 8003efa:	b510      	push	{r4, lr}
 8003efc:	eb01 0402 	add.w	r4, r1, r2
 8003f00:	d902      	bls.n	8003f08 <memmove+0x10>
 8003f02:	4284      	cmp	r4, r0
 8003f04:	4623      	mov	r3, r4
 8003f06:	d807      	bhi.n	8003f18 <memmove+0x20>
 8003f08:	1e43      	subs	r3, r0, #1
 8003f0a:	42a1      	cmp	r1, r4
 8003f0c:	d008      	beq.n	8003f20 <memmove+0x28>
 8003f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f16:	e7f8      	b.n	8003f0a <memmove+0x12>
 8003f18:	4402      	add	r2, r0
 8003f1a:	4601      	mov	r1, r0
 8003f1c:	428a      	cmp	r2, r1
 8003f1e:	d100      	bne.n	8003f22 <memmove+0x2a>
 8003f20:	bd10      	pop	{r4, pc}
 8003f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f2a:	e7f7      	b.n	8003f1c <memmove+0x24>

08003f2c <_sbrk_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	4d06      	ldr	r5, [pc, #24]	@ (8003f48 <_sbrk_r+0x1c>)
 8003f30:	2300      	movs	r3, #0
 8003f32:	4604      	mov	r4, r0
 8003f34:	4608      	mov	r0, r1
 8003f36:	602b      	str	r3, [r5, #0]
 8003f38:	f7fc ff36 	bl	8000da8 <_sbrk>
 8003f3c:	1c43      	adds	r3, r0, #1
 8003f3e:	d102      	bne.n	8003f46 <_sbrk_r+0x1a>
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	b103      	cbz	r3, 8003f46 <_sbrk_r+0x1a>
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	bd38      	pop	{r3, r4, r5, pc}
 8003f48:	20000254 	.word	0x20000254

08003f4c <_realloc_r>:
 8003f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f50:	4680      	mov	r8, r0
 8003f52:	4615      	mov	r5, r2
 8003f54:	460c      	mov	r4, r1
 8003f56:	b921      	cbnz	r1, 8003f62 <_realloc_r+0x16>
 8003f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	f7ff bc59 	b.w	8003814 <_malloc_r>
 8003f62:	b92a      	cbnz	r2, 8003f70 <_realloc_r+0x24>
 8003f64:	f7ff fbea 	bl	800373c <_free_r>
 8003f68:	2400      	movs	r4, #0
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f70:	f000 f81a 	bl	8003fa8 <_malloc_usable_size_r>
 8003f74:	4285      	cmp	r5, r0
 8003f76:	4606      	mov	r6, r0
 8003f78:	d802      	bhi.n	8003f80 <_realloc_r+0x34>
 8003f7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f7e:	d8f4      	bhi.n	8003f6a <_realloc_r+0x1e>
 8003f80:	4629      	mov	r1, r5
 8003f82:	4640      	mov	r0, r8
 8003f84:	f7ff fc46 	bl	8003814 <_malloc_r>
 8003f88:	4607      	mov	r7, r0
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d0ec      	beq.n	8003f68 <_realloc_r+0x1c>
 8003f8e:	42b5      	cmp	r5, r6
 8003f90:	462a      	mov	r2, r5
 8003f92:	4621      	mov	r1, r4
 8003f94:	bf28      	it	cs
 8003f96:	4632      	movcs	r2, r6
 8003f98:	f7ff fbc2 	bl	8003720 <memcpy>
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	f7ff fbcc 	bl	800373c <_free_r>
 8003fa4:	463c      	mov	r4, r7
 8003fa6:	e7e0      	b.n	8003f6a <_realloc_r+0x1e>

08003fa8 <_malloc_usable_size_r>:
 8003fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fac:	1f18      	subs	r0, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bfbc      	itt	lt
 8003fb2:	580b      	ldrlt	r3, [r1, r0]
 8003fb4:	18c0      	addlt	r0, r0, r3
 8003fb6:	4770      	bx	lr

08003fb8 <_init>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_fini>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr
